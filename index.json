[
{
	"uri": "http://mwidener.github.io/lecture9/lec9_1/",
	"title": "Choropleth Grid and Clustered Points",
	"tags": [],
	"description": "",
	"content": "In this example: We will use TURF to count the number of airport points that exist within each grid cell.\nThen we\u0026rsquo;ll use the code we learned about previously to color the grid cells based on the number of airports inside.\nFinally, we will use the mapbox feature that allows points to cluster at various zoom levels. This is useful if you have lots of points scattered all over the place. At low resolutions nearby points will group together. At higher resolutions they will separate.\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=utf-8 /\u0026gt; \u0026lt;title\u0026gt;Airport Hex Bins\u0026lt;/title\u0026gt; \u0026lt;meta name=\u0026#39;viewport\u0026#39; content=\u0026#39;initial-scale=1,maximum-scale=1,user-scalable=no\u0026#39; /\u0026gt; \u0026lt;script src=\u0026#34;https://api.mapbox.com/mapbox-gl-js/v1.9.0/mapbox-gl.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;link href=\u0026#34;https://api.mapbox.com/mapbox-gl-js/v1.9.0/mapbox-gl.css\u0026#34; rel=\u0026#34;stylesheet\u0026#34; /\u0026gt; \u0026lt;script src=\u0026#39;https://npmcdn.com/@turf/turf/turf.min.js\u0026#39;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; body { margin:0; padding:0; } #map { position:absolute; top:0; bottom:0; width:100%; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#39;map\u0026#39; class=\u0026#39;map\u0026#39;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#39;canadianAirports.geojson\u0026#39;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#39;./turfExample2.js\u0026#39;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Remember to use your own access token and mapbox style //ADD YOUR ACCESS TOKEN!!!!!!!!  var map = new mapboxgl.Map({ container: \u0026#39;map\u0026#39;, style: \u0026#39;mapbox://styles/mwidener/cjcotwplq3loj2ss0pjqmmigh\u0026#39;, center: [-90, 52], zoom: 3 }); //CREATE A SQUARE GRID var bbox = turf.bbox(canadianAirports);//extent method returns bounding box in order: //minX (West), minY(South), maxX (East), maxY (North) var cellSide = 50; //in the units you defined above var options = {units: \u0026#39;kilometers\u0026#39;}; //units that will determine the width of the square grid var airport_squaregrid = turf.squareGrid(bbox, cellSide, options); //makes the new geojson squaregrid features  //COUNT THE NUMBER OF AIRPORTS IN EACH SQUARE BIN //This function collects the properties from the point layer and \u0026#39;collects\u0026#39; them into the polygon layer //In this case, we are collecting all of the FEATUREID properties from the canadianAirports. For //each square, there will be a collection of FEATUREIDs from the airports that are within them //HINT: look at the squareAirports geojson featurecollection you\u0026#39;ve created in the javascript console var squareAirports = turf.collect(airport_squaregrid,canadianAirports, \u0026#34;FEATUREID\u0026#34;,\u0026#34;AIRPORTNAMES\u0026#34;); //Now we need to count the number of features inside of each square, and also figure out the largest //number of airports in any one of our squares var max_airports_in_square = 0; squareAirports.features.forEach(function(square){ square.properties.AIRPORTCOUNT = square.properties.AIRPORTNAMES.length; //calculate the length of the collected FEATUREIDs - this gives us the number of points in each square  if (square.properties.AIRPORTCOUNT \u0026gt; max_airports_in_square){ max_airports_in_square = square.properties.AIRPORTCOUNT; //update the max number of airports in a square  } }); //Standard map.on section, where we load the airport point file map.on(\u0026#39;style.load\u0026#39;, function(){ map.addSource(\u0026#39;airports\u0026#39;,{ \u0026#34;type\u0026#34;: \u0026#34;geojson\u0026#34;, \u0026#34;data\u0026#34;: canadianAirports, \u0026#34;cluster\u0026#34;: true, //use the cluster function available for geojson points  \u0026#34;clusterMaxZoom\u0026#34;: 10, \u0026#34;clusterRadius\u0026#34;: 30 }) map.addLayer({ \u0026#34;id\u0026#34;: \u0026#34;airportsLayer\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;circle\u0026#34;, \u0026#34;source\u0026#34;: \u0026#34;airports\u0026#34;, \u0026#34;layout\u0026#34;: {}, \u0026#34;paint\u0026#34;:{ \u0026#39;circle-color\u0026#39;: \u0026#34;black\u0026#34;, \u0026#39;circle-radius\u0026#39;: { base: 10, stops: [[5, 10], [22, 180]]}, //adjust size of point at diff zoom levels  \u0026#39;circle-opacity\u0026#39;: 1 } }); // Now we can add our square grid ... it was generated before the map was displayed  map.addSource(\u0026#39;airportGrid\u0026#39;,{ \u0026#34;type\u0026#34;: \u0026#34;geojson\u0026#34;, \u0026#34;data\u0026#34;: squareAirports //this is the square grid WITH the collect attribute  }); map.addLayer({ \u0026#34;id\u0026#34;: \u0026#34;airportSquareGrid-layer\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;fill\u0026#34;, \u0026#34;source\u0026#34;: \u0026#34;airportGrid\u0026#34;, \u0026#34;layout\u0026#34;: {}, \u0026#34;paint\u0026#34;:{ \u0026#34;fill-color\u0026#34;: [ \u0026#39;interpolate\u0026#39;, [\u0026#39;linear\u0026#39;], [\u0026#39;to-number\u0026#39;,[\u0026#39;get\u0026#39;, \u0026#39;AIRPORTCOUNT\u0026#39;],0], // get a number, but if provided with a non-number default to 0  0, \u0026#39;#ffffcc\u0026#39;, 1, \u0026#39;#c7e9b4\u0026#39;, 2, \u0026#39;#7fcdbb\u0026#39;, 4, \u0026#39;#41b6c4\u0026#39;, 8, \u0026#39;#2c7fb8\u0026#39;, max_airports_in_square, \u0026#39;#253494\u0026#39; ], \u0026#39;fill-opacity\u0026#39;: .5 } },\u0026#34;airportsLayer\u0026#34;); //insert these layers BEFORE the point file so that the airport point file is on top }); "
},
{
	"uri": "http://mwidener.github.io/lecture8/lec8_1/",
	"title": "What is TURF?",
	"tags": [],
	"description": "",
	"content": "Can be used for a variety of spatial analysis tasks  Aggregation  Putting things together   Geometric measurements  Measure size, area, distances, etc.   Geometric transformation  Merge, simplify, buffer, etc.   Interpolation  Creates buckets that can be used to interpolate   Spatial Joins And a whole bunch of other convenient features  Turf is most powerful when these tools are used in combination For example:  Create hex bins Aggregate point values into hex bins Classify hex bins Color hex bins  "
},
{
	"uri": "http://mwidener.github.io/lecture7/lec7_1/",
	"title": "Pop-ups",
	"tags": [],
	"description": "",
	"content": "We can create pop-ups relatively easily in mapbox. We first want to think about:\n When do we want a pop-up to happen? For what layers do we want the pop-up to be related to?  Typically we use hover or click events with pop ups. Let\u0026rsquo;s try both:\nHover  Start with the standard HTML file and most of the boilerplate JS  (addSource, addLayer, etc.)   We need to add to our last JS file the following:  change the pointer to a let the user know the map is interactive  glove to pointing finger   add a pop-up component via the pop-up method    Data for this code:\n Canadian Provinces GeoJSON Canadian Mountainlion Image  var map = new mapboxgl.Map({ container: \u0026#39;map\u0026#39;, //container id in HTML  style: \u0026#39;mapbox://styles/mwidener/cjcouhmq03m9t2rmvgnmmsr1l\u0026#39;, //stylesheet location  center: [-102.542951,59.650162], // starting point, longitude/latitude  zoom: 2.5 // starting zoom level }); //SIMPLY ADDING A POLYGON OF PROVINCES FROM MAPBOX VECTOR TILES map.on(\u0026#39;style.load\u0026#39;, function(){ map.addSource(\u0026#39;provinces\u0026#39;,{ \u0026#39;type\u0026#39;: \u0026#39;vector\u0026#39;, \u0026#39;url\u0026#39;: \u0026#39;mapbox://mwidener.6sokce8y\u0026#39; }); map.addLayer({ \u0026#39;id\u0026#39;: \u0026#39;provinces-fill\u0026#39;, \u0026#39;type\u0026#39;: \u0026#39;fill\u0026#39;, \u0026#39;source\u0026#39;: \u0026#39;provinces\u0026#39;, \u0026#39;layout\u0026#39;: {}, \u0026#39;paint\u0026#39;: { \u0026#39;fill-color\u0026#39;: \u0026#39;red\u0026#39;, \u0026#39;fill-opacity\u0026#39;: 1, \u0026#39;fill-outline-color\u0026#39;: \u0026#39;white\u0026#39; }, \u0026#39;source-layer\u0026#39;:Â \u0026#34;CanadianProvinces-5onu90\u0026#34; }); }) //********************************* //POP UPS, CLICKS, HOVERS //*********************************  // if the mouse enters the province fill layer then do the following: map.on(\u0026#39;mouseenter\u0026#39;,\u0026#39;provinces-fill\u0026#39;,function(e){ map.getCanvas().style.cursor = \u0026#39;pointer\u0026#39;; //make the mouse cursor pointy  }); // if the mouse leaves the province fill layer then do the following: map.on(\u0026#39;mouseleave\u0026#39;,\u0026#39;provinces-fill\u0026#39;,function(e){ map.getCanvas().style.cursor = \u0026#39;\u0026#39;; //go back to the null cursor }); // FIRST ADD A POPUP OBJECT var popup = new mapboxgl.Popup({ closeButton: false, closeOnClick: false }); // NEXT DEFINE WHEN YOU WANT THE POPUP TO HAPPEN map.on(\u0026#39;mousemove\u0026#39;,\u0026#39;provinces-fill\u0026#39;, function(e){ popup.remove(); //If a popup already exists, get rid of it!  //get the rendered features that belong to the provinces-fill layer  var features = map.queryRenderedFeatures(e.point, { \u0026#34;layers\u0026#34;: [\u0026#34;provinces-fill\u0026#34;]} ); //if there is a feature there, do the following  if (features.length \u0026gt; 0){ console.log(features[0]); //print out the first element of the features array that was selected  var feature = features[0]; //store the first element as \u0026#39;feature\u0026#39;  popup.setLngLat(e.lngLat); //place the popup window at the lng and lat where your click event happened  //add stuff to the pop up:  popup.setHTML(\u0026#34;\u0026lt;b\u0026gt;The province you clicked on is:\u0026lt;/b\u0026gt; \u0026#34; + feature.properties.PRVNAME + \u0026#34;\u0026lt;br\u0026gt;\u0026#34;+ \u0026#34;Here is a picture of a dangerous Canadian Mountain Lion, known to roam these parts: \u0026lt;br\u0026gt;\u0026#34; + \u0026#34;\u0026lt;center\u0026gt;\u0026lt;img src=\u0026#39;./canadianmountainlion.jpg\u0026#39; style=\u0026#39;width:75%;height:75%;\u0026#39;\u0026gt;\u0026lt;/img\u0026gt;\u0026lt;/center\u0026gt;\u0026#34;); popup.addTo(map); //finally add the pop up to the map  } //if there are no features under the click, then print this in the web browser console  else{ console.log(\u0026#34;no features from layer here...\u0026#34;) } }); //********************************* //POP UPS //********************************* What happens if you remove the popup.remove(); code? What happens if you change the pop-up code to mouseenter? "
},
{
	"uri": "http://mwidener.github.io/lecture6/lec6_1/",
	"title": "Filters",
	"tags": [],
	"description": "",
	"content": "When we add a layer to the map using the map.addLayer method, we have the ability to filter which parts of the spatial data are shown.\nWe\u0026rsquo;ll be using older filter expressions: https://docs.mapbox.com/mapbox-gl-js/style-spec/other/#other-filter\nBut Mapbox has recently rolled out \u0026ldquo;new\u0026rdquo; expressions \u0026hellip; probably best to learn these - but I didn\u0026rsquo;t have time before lecture!: https://docs.mapbox.com/mapbox-gl-js/style-spec/expressions/\nFor vector tiles:\nâfilterâ: [\u0026lt;LOGIC\u0026gt;,\u0026lt;ATTRIBUTENAME\u0026gt;, \u0026lt;value\u0026gt;]  Logic: â==â, â!=â, â\u0026gt;â, â\u0026lt;â, ââ¥â, etc. Attribute name: the name of an attribute your file has â check studio Value: can be a string, numeric, boolean  For example:\nâfilterâ: [â\u0026gt;â, âincomeâ, 100000] Translates to:\nincome \u0026gt; 100000\nWhat if we want two conditions  spatial objects with a property \u0026gt; x but \u0026lt; y Use the combining filter method:  [ \u0026#34;all\u0026#34;, [\u0026#34;\u0026gt;\u0026#34;, \u0026lt;ATTRIBUTE\u0026gt;, \u0026lt;LESSER_VALUE\u0026gt;], [\u0026#34;\u0026lt;=\u0026#34;, \u0026lt;ATTRIBUTE\u0026gt;, \u0026lt;GREATER_VALUE\u0026gt;] ] [ \u0026#34;all\u0026#34;, [\u0026#34;\u0026gt;\u0026#34;, âpopulationâ, 100000], [\u0026#34;\u0026lt;=\u0026#34;, âpopulationâ, 2000000] ] How do we combine different types of logic? Combining Filters\n[\u0026quot;all\u0026quot;, f0, ..., fn] logical AND: f0 â§ ... â§ fn [\u0026quot;any\u0026quot;, f0, ..., fn] logical OR: f0 â¨ ... â¨ fn [\u0026quot;none\u0026quot;, f0, ..., fn] logical NOR: Â¬f0 â§ ... â§ Â¬fn Where f0 is a filter that looks like:\n[logic, attribute, value] "
},
{
	"uri": "http://mwidener.github.io/lecture5/lec5_1/",
	"title": "Adding Data",
	"tags": [],
	"description": "",
	"content": "It\u0026rsquo;s easy to add data from a range of sources to your mapbox map.  Vector (from your data page on mapbox) Raster (from your data page on mapbox) GeoJSON from your server/another website Images/Videos  Must use asynchronous call. This is a way to keep code from running until some event occurs. map.on(\u0026#39;load\u0026#39;, function(){ // DO STUFF HERE }); In the \u0026lsquo;DO STUFF HERE\u0026rsquo; area we want to do two things.\n Add the data source - where are we pulling data from to put in our site? Draw the data.  How do we do this? Let\u0026rsquo;s look at the API to see what the addSource() and addLayer() methods do!\nhttps://www.mapbox.com/mapbox-gl-js/api/\n"
},
{
	"uri": "http://mwidener.github.io/lecture4/lec4_1/",
	"title": "MapBox Studio",
	"tags": [],
	"description": "",
	"content": "MapBox Studio is your home base. https://studio.mapbox.com From here you can manually create maps and tweak their designs.\n  We can upload data\n \u0026hellip;and it\u0026rsquo;ll be transformed from its native format into vector tiles. This happens in the \u0026ldquo;Datasets\u0026rdquo; section    We can also modify maps\n \u0026hellip;so that they\u0026rsquo;re designed how we want. Take data they\u0026rsquo;ve precompiled and style them to our choosing. This happens in the \u0026ldquo;Styles\u0026rdquo; section.    "
},
{
	"uri": "http://mwidener.github.io/lecture3/lec3_1/",
	"title": "GeoJSON components",
	"tags": [],
	"description": "",
	"content": " A Feature type is a spatial object  Has geometry and properties It is possible to have multiple geometries, but this is very rare   A FeatureCollection type  Object that has feature objects    { \u0026#34;type\u0026#34;: \u0026#34;FeatureCollection\u0026#34;, \u0026#34;features\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;Feature\u0026#34;, \u0026#34;geometry\u0026#34;: {\u0026#34;type\u0026#34;: \u0026#34;Point\u0026#34;, \u0026#34;coordinates\u0026#34;: [102.0, 0.5]}, \u0026#34;properties\u0026#34;: {\u0026#34;prop0\u0026#34;: \u0026#34;value0\u0026#34;} }, { \u0026#34;type\u0026#34;: \u0026#34;Feature\u0026#34;, \u0026#34;geometry\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;LineString\u0026#34;, \u0026#34;coordinates\u0026#34;: [ [102.0, 0.0], [103.0, 1.0], [104.0, 0.0], [105.0, 1.0] ] }, \u0026#34;properties\u0026#34;: { \u0026#34;prop0\u0026#34;: \u0026#34;value0\u0026#34;, \u0026#34;prop1\u0026#34;: 0.0 } }, { \u0026#34;type\u0026#34;: \u0026#34;Feature\u0026#34;, \u0026#34;geometry\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;Polygon\u0026#34;, \u0026#34;coordinates\u0026#34;: [ [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0] ] ] }, \u0026#34;properties\u0026#34;: { \u0026#34;prop0\u0026#34;: \u0026#34;value0\u0026#34;, \u0026#34;prop1\u0026#34;: {\u0026#34;this\u0026#34;: \u0026#34;that\u0026#34;} } } ] } From geojson.org:  2.2. Feature Objects  A GeoJSON object with the type \u0026ldquo;Feature\u0026rdquo; is a feature object. A feature object must have a member with the name \u0026ldquo;geometry\u0026rdquo;. The value of the geometry member is a geometry object as defined above or a JSON null value. A feature object must have a member with the name \u0026ldquo;properties\u0026rdquo;. The value of the properties member is an object (any JSON object or a JSON null value). If a feature has a commonly used identifier, that identifier should be included as a member of the feature object with the name \u0026ldquo;id\u0026rdquo;.   2.3. Feature Collection Objects  A GeoJSON object with the type \u0026ldquo;FeatureCollection\u0026rdquo; is a feature collection object. An object of type \u0026ldquo;FeatureCollection\u0026rdquo; must have a member with the name \u0026ldquo;features\u0026rdquo;. The value corresponding to \u0026ldquo;features\u0026rdquo; is an array. Each element in the array is a feature object as defined above.    "
},
{
	"uri": "http://mwidener.github.io/lecture1/lec1_1/",
	"title": "Review of Course Structure",
	"tags": [],
	"description": "",
	"content": "For âletter markedâ assignments, I will use the Faculty of Arts and Sciences marking criteria.\n See syllabus for course policies on accessibility, accommodation, academic integrity and late assignments.\n This course will have a lot of new material for most people, so as a general rule, it\u0026rsquo;s best to keep an open line of communication with me!\n Materials  Text editor  This is where you will write down and edit your code. A good editor is key! I recommend Atom or Sublime   Mapbox Account  www.mapbox.com   Lynda Access  access via this link to lynda at uoft   google or yahoo or bing or alta vista or whatever\u0026hellip;  "
},
{
	"uri": "http://mwidener.github.io/lecture2/lec2_1/",
	"title": "Strengths/Weaknesses of Web Maps",
	"tags": [],
	"description": "",
	"content": "Strengths of Web Maps Easy to:  keep up to date distribute personalize collaborate  Cheap  diverse array of open source software  Different types of data Integration with other types of info online Weaknesses of Web Maps Steep learning curve for advanced work Not necessarily best platform for complex computation Different platform types means many things to learn Having info online means security/maintenance concerns that differ from conventional GIS "
},
{
	"uri": "http://mwidener.github.io/",
	"title": "Home",
	"tags": [],
	"description": "",
	"content": "Welcome to Developing Web Maps! Welcome to GGR 472: Developing Web Maps - Winter 2020. In this class we will explore how web maps are designed and created, using the MapBox GL JS API.\nCourse Overview  what web maps are good for, and what they\u0026rsquo;re less good for, what kinds of spatial data they use, how design considerations change for viewing spatial data online numerous interactive features, and how to do basic GIS online.  A note on coding: Don\u0026rsquo;t be this guy: "
},
{
	"uri": "http://mwidener.github.io/lecture9/lec9_2/",
	"title": "Select with Buffer Example",
	"tags": [],
	"description": "",
	"content": "In this example: We will use TURF to creat a circular buffer around wherever we click our mouse. This uses both mouse events and the TURF library. Once the TURF buffer is created, we can select points that fall within (a spatial join) the buffer and do something with this information (in our case, recolor the points and produce a pop up).\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=utf-8 /\u0026gt; \u0026lt;title\u0026gt;Select Supermarkets with Buffer using TURF\u0026lt;/title\u0026gt; \u0026lt;meta name=\u0026#39;viewport\u0026#39; content=\u0026#39;initial-scale=1,maximum-scale=1,user-scalable=no\u0026#39; /\u0026gt; \u0026lt;script src=\u0026#34;https://api.mapbox.com/mapbox-gl-js/v1.9.0/mapbox-gl.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;link href=\u0026#34;https://api.mapbox.com/mapbox-gl-js/v1.9.0/mapbox-gl.css\u0026#34; rel=\u0026#34;stylesheet\u0026#34; /\u0026gt; \u0026lt;script src=\u0026#39;https://npmcdn.com/@turf/turf/turf.min.js\u0026#39;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; body { margin:0; padding:0; } #map { position:absolute; top:0; bottom:0; width:100%; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#39;map\u0026#39; class=\u0026#39;map\u0026#39;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#39;./supermarkets.geojson\u0026#39;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#39;./bufferSelect.js\u0026#39;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; //DON\u0026#39;T FORGET TO ADD YOUR ACCESS TOKEN!  //Standard set up var map = new mapboxgl.Map({ container: \u0026#39;map\u0026#39;, style: \u0026#39;mapbox://styles/mapbox/streets-v8\u0026#39;, center: [-79.385811,43.655298], zoom: 9 }); //because we can click the map, change the cursor to a \u0026#39;pointer\u0026#39; style map.getCanvas().style.cursor = \u0026#39;pointer\u0026#39;; //add the supermarkets point layer from the geojson file map.on(\u0026#39;style.load\u0026#39;, function(){ map.addSource(\u0026#39;supermarketSource\u0026#39;,{ \u0026#39;type\u0026#39;: \u0026#39;geojson\u0026#39;, \u0026#39;data\u0026#39;: sprmkt }); map.addLayer({ \u0026#39;id\u0026#39;: \u0026#39;supermarketLayer\u0026#39;, \u0026#39;type\u0026#39;: \u0026#39;circle\u0026#39;, \u0026#39;source\u0026#39;: \u0026#39;supermarketSource\u0026#39;, \u0026#39;layout\u0026#39;: {}, \u0026#39;paint\u0026#39;: { \u0026#39;circle-color\u0026#39;: \u0026#39;red\u0026#39;, //make our base supermarket layer small red points  \u0026#39;circle-radius\u0026#39;: 3, \u0026#39;circle-opacity\u0026#39;: 0.75 } }); }); //********************************************************* //Generate buffer, find points within buffer, //highlight points, and create pop up with info about points //*********************************************************  //set up variables before real work starts var tempClickBuffer = null; var tempSprmkts = null; var popup = new mapboxgl.Popup({ closeButton: true, closeOnClick: false }); //when you click the map, do the following. //recall \u0026#39;e\u0026#39; is an event data object: https://www.mapbox.com/mapbox-gl-js/api/#EventData map.on(\u0026#34;click\u0026#34;, function(e) { //clean up variables if we\u0026#39;ve already clicked somewhere else.  //check by seeing if there\u0026#39;s geojson text in the tempClickBuffer variable  if (tempClickBuffer != null){ tempClickBuffer = null; tempSprmkts = null; map.removeLayer(\u0026#39;tempClickBufferLayer\u0026#39;); //get rid of the old buffer  map.removeSource(\u0026#39;tempClickBufferSource\u0026#39;); //get rid of the old selected supermarkets  map.removeLayer(\u0026#39;selectedSprmkts\u0026#39;); //reset source  map.removeSource(\u0026#39;tempSprmkts\u0026#39;); //reset source  } //create a point geojson object from the event data - this creates a point where you clicked  tempLngLat = [e.lngLat.lng,e.lngLat.lat]; //create an array that looks like: [lng,lat]  //make an object that is a \u0026#39;geojson\u0026#39; object from the point data  var tempPt = { \u0026#34;type\u0026#34;: \u0026#34;Feature\u0026#34;, \u0026#34;properties\u0026#34;: {}, \u0026#34;geometry\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;Point\u0026#34;, \u0026#34;coordinates\u0026#34;: tempLngLat } }; //create a buffer using the point geojson you just created, 1 km circular buffer  tempClickBuffer = (turf.buffer(tempPt, 1, {units: \u0026#39;kilometers\u0026#39;})); tempClickBuffer = turf.featureCollection([tempClickBuffer]); //see what supermarkets (from the sprmkt geojson variable) are within the \u0026#39;tempClickBuffer\u0026#39; geojson object you just created. //this function generates a new featureCollection called \u0026#39;tempSprmkts\u0026#39;, which we will display later  tempSprmkts = turf.pointsWithinPolygon(sprmkt,tempClickBuffer); //if the array is not null, add a pop up centered on your click location //that states the number of supermarkets within the clickBuffer  if (tempSprmkts.features.length != null){ popup.remove() .setLngLat(e.lngLat) .setHTML(\u0026#39;The number of supermarkets within 1 kilometer of\u0026#39;+ \u0026#39; where you clicked is: \u0026#39; + tempSprmkts.features.length) .addTo(map) }; //center the map on the point you clicked and zoom in, using \u0026#39;easeTo\u0026#39; so it is animated  map.easeTo({ center: e.lngLat, //center on the point you clicked  zoom: 12, //zoom to zoom level 12  duration: 1000 //take 1000 milliseconds to get there  }) //add the source and layer information of the buffer geojson (tempClickBuffer) and //subset of supermarkets geojson (tempSprmkts) objects you created  map.addSource(\u0026#39;tempSprmkts\u0026#39;,{ \u0026#39;type\u0026#39;: \u0026#39;geojson\u0026#39;, \u0026#39;data\u0026#39;: tempSprmkts }); map.addLayer({ \u0026#39;id\u0026#39;: \u0026#39;selectedSprmkts\u0026#39;, \u0026#39;type\u0026#39;: \u0026#39;circle\u0026#39;, \u0026#39;source\u0026#39;: \u0026#39;tempSprmkts\u0026#39;, \u0026#39;layout\u0026#39;: {}, \u0026#39;paint\u0026#39;: { \u0026#39;circle-color\u0026#39;: \u0026#39;blue\u0026#39;, //make our selected supermarket layer BIGGER BLUE points  \u0026#39;circle-radius\u0026#39;: 6, \u0026#39;circle-opacity\u0026#39;: 1 } }); map.addSource(\u0026#39;tempClickBufferSource\u0026#39;,{ \u0026#39;type\u0026#39;: \u0026#39;geojson\u0026#39;, \u0026#39;data\u0026#39;: tempClickBuffer }); map.addLayer({ \u0026#39;id\u0026#39;: \u0026#39;tempClickBufferLayer\u0026#39;, \u0026#39;type\u0026#39;: \u0026#39;fill\u0026#39;, \u0026#39;source\u0026#39;: \u0026#39;tempClickBufferSource\u0026#39;, \u0026#39;layout\u0026#39;: {}, \u0026#39;paint\u0026#39;: { \u0026#39;fill-color\u0026#39;: \u0026#39;white\u0026#39;, \u0026#39;fill-opacity\u0026#39;: .4, \u0026#39;fill-outline-color\u0026#39;: \u0026#39;black\u0026#39; } }, \u0026#39;selectedSprmkts\u0026#39;); // insert the buffer behind the selectedSupermarkets layer  }); "
},
{
	"uri": "http://mwidener.github.io/lecture8/lec8_2/",
	"title": "Using TURF",
	"tags": [],
	"description": "",
	"content": "It\u0026rsquo;s important to look at all the tools in the library and develop a game plan.\nAlso, remember that because weâre in javascript, we can also program our own analysis tools \u0026hellip; and use the TURF library as your building blocks! Just add math!\nTo start using TURF\u0026hellip; You must start by adding a line of code to your HTML file to say weâre adding the TURF library, and point to the codebase using a script tag. (If you ever want to add different javascript libraries youâd also do it this way).\nNotice in the HTML below there is the standard reference to the mapbox gl js code, and then a new script tag for TURF.\n\u0026lt;script src=\u0026#39;https://api.mapbox.com/mapbox-gl-js/v1.8.1/mapbox-gl.js\u0026#39;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;link href=\u0026#39;https://api.mapbox.com/mapbox-gl-js/v1.8.1/mapbox-gl.css\u0026#39; rel=\u0026#39;stylesheet\u0026#39; /\u0026gt; \u0026lt;script src=\u0026#39;https://npmcdn.com/@turf/turf/turf.min.js\u0026#39;\u0026gt;\u0026lt;/script\u0026gt; Now in our javascript we can use TURF to analyze our geojson feature. Remember we need to access our geojson file on a server, but since we\u0026rsquo;re working from home, you can use the following code to add the geojson files you\u0026rsquo;ll need:\nWith the geojson file we can pick out individual features within the geosjon file to do things like calculate:\n Distance Area Bounding box  We can also use TURF to relate geojson features to one another\n Count of points in polygon Distance between regions Intersections  "
},
{
	"uri": "http://mwidener.github.io/lecture6/lec6_2/",
	"title": "Events",
	"tags": [],
	"description": "",
	"content": "Let\u0026rsquo;s start with mouse events  The mouse is the primary mode of interaction with the computer Essential for navigating webpages, web maps, web apps, etc. Modern browsers pay close attention to what the mouse is doing Hover, clicks Take advantage of this to add interface    Events are things that happen to elements in the webpage\n  Can be something done by the browser or user\n  JS can react to events and implement code\n  Weâve been doing this already with:\n  map.on(\u0026#39;load\u0026#39;, function(){ stuff; });  Essentially the code is listening for events to happen  knows what to implement when that event happens    We can look at all of the event types here: https://docs.mapbox.com/mapbox-gl-js/api/#events\nAnd the specific events under map in the API here: https://docs.mapbox.com/mapbox-gl-js/api/#map\n"
},
{
	"uri": "http://mwidener.github.io/lecture7/lec7_2/",
	"title": "Popups - click",
	"tags": [],
	"description": "",
	"content": "Let\u0026rsquo;s try the previous code again, but now with a click event: var map = new mapboxgl.Map({ container: \u0026#39;map\u0026#39;, //container id in HTML  style: \u0026#39;mapbox://styles/mwidener/cjcouhmq03m9t2rmvgnmmsr1l\u0026#39;, //stylesheet location  center: [-102.542951,59.650162], // starting point, longitude/latitude  zoom: 2.5 // starting zoom level }); //SIMPLY ADDING A POLYGON OF PROVINCES FROM MAPBOX VECTOR TILES map.on(\u0026#39;style.load\u0026#39;, function(){ map.addSource(\u0026#39;provinces\u0026#39;,{ \u0026#39;type\u0026#39;: \u0026#39;vector\u0026#39;, \u0026#39;url\u0026#39;: \u0026#39;mapbox://mwidener.6sokce8y\u0026#39; }); map.addLayer({ \u0026#39;id\u0026#39;: \u0026#39;provinces-fill\u0026#39;, \u0026#39;type\u0026#39;: \u0026#39;fill\u0026#39;, \u0026#39;source\u0026#39;: \u0026#39;provinces\u0026#39;, \u0026#39;layout\u0026#39;: {}, \u0026#39;paint\u0026#39;: { \u0026#39;fill-color\u0026#39;: \u0026#39;red\u0026#39;, \u0026#39;fill-opacity\u0026#39;: 1, \u0026#39;fill-outline-color\u0026#39;: \u0026#39;white\u0026#39; }, \u0026#39;source-layer\u0026#39;:Â \u0026#34;CanadianProvinces-5onu90\u0026#34; }); }) //********************************* //POP UPS, CLICKS, HOVERS //*********************************  // if the mouse enters the province fill layer then do the following: map.on(\u0026#39;mouseenter\u0026#39;,\u0026#39;provinces-fill\u0026#39;,function(e){ map.getCanvas().style.cursor = \u0026#39;pointer\u0026#39;; //make the mouse cursor pointy  }); // if the mouse leaves the province fill layer then do the following: map.on(\u0026#39;mouseleave\u0026#39;,\u0026#39;provinces-fill\u0026#39;,function(e){ map.getCanvas().style.cursor = \u0026#39;\u0026#39;; //go back to the null cursor }); // FIRST ADD A POPUP OBJECT var popup = new mapboxgl.Popup({ closeButton: false, closeOnClick: false }); // NEXT DEFINE WHEN YOU WANT THE POPUP TO HAPPEN map.on(\u0026#39;click\u0026#39;,\u0026#39;provinces-fill\u0026#39;, function(e){ popup.remove(); //If a popup already exists, get rid of it!  //get the rendered features that belong to the provinces-fill layer  var features = map.queryRenderedFeatures(e.point, { \u0026#34;layers\u0026#34;: [\u0026#34;provinces-fill\u0026#34;]} ); //if there is a feature there, do the following  if (features.length \u0026gt; 0){ console.log(features[0]); //print out the first element of the features array that was selected  var feature = features[0]; //store the first element as \u0026#39;feature\u0026#39;  popup.setLngLat(e.lngLat); //place the popup window at the lng and lat where your click event happened  //add stuff to the pop up:  popup.setHTML(\u0026#34;\u0026lt;b\u0026gt;The province you clicked on is:\u0026lt;/b\u0026gt; \u0026#34; + feature.properties.PRVNAME + \u0026#34;\u0026lt;br\u0026gt;\u0026#34;+ \u0026#34;Here is a picture of a dangerous Canadian Mountain Lion, known to roam these parts: \u0026lt;br\u0026gt;\u0026#34; + \u0026#34;\u0026lt;center\u0026gt;\u0026lt;img src=\u0026#39;./canadianmountainlion.jpg\u0026#39; style=\u0026#39;width:75%;height:75%;\u0026#39;\u0026gt;\u0026lt;/img\u0026gt;\u0026lt;/center\u0026gt;\u0026#34;); popup.addTo(map); //finally add the pop up to the map  } //if there are no features under the click, then print this in the web browser console  else{ console.log(\u0026#34;no features from layer here...\u0026#34;) } }); //********************************* //POP UPS //********************************* In class exercise: Let\u0026rsquo;s implement these skills and those from last week by doing the following:\n data: Niagara region wineries   Create a new map and display the niagara wineries points data Make the points bigger if your mouse hovers over the point When clicking the point, create a pop-up that displays the wineries name  Hint: you can use what we did last week or this example for highlightin: https://docs.mapbox.com/mapbox-gl-js/example/hover-styles/\n"
},
{
	"uri": "http://mwidener.github.io/lecture5/lec5_2/",
	"title": "Adding GeoJSON data",
	"tags": [],
	"description": "",
	"content": "To add GeoJSON data we would use the following code, if we want to manually add GeoJSON code:\nmap.addSource(\u0026#39;my-data\u0026#39;, { \u0026#34;type\u0026#34;: \u0026#34;geojson\u0026#34;, \u0026#34;data\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;Feature\u0026#34;, \u0026#34;geometry\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;Point\u0026#34;, \u0026#34;coordinates\u0026#34;: [-77.0323, 38.9131] }, \u0026#34;properties\u0026#34;: { \u0026#34;title\u0026#34;: \u0026#34;Mapbox DC\u0026#34;, \u0026#34;marker-symbol\u0026#34;: \u0026#34;monument\u0026#34; } } }); OR we can point to a .geojson file:\nmap.addSource(\u0026#39;my-data\u0026#39;, { \u0026#34;type\u0026#34;: \u0026#34;geojson\u0026#34;, \u0026#34;data\u0026#34;: \u0026#34;./mygeojsonfile.geojson\u0026#34; }); In both examples above, the \u0026ldquo;my-data\u0026rdquo; label is what we call the \u0026ldquo;source ID\u0026rdquo;. This is how we will access/refer these data inside the rest of our javascript code.\nHow are our files organized on our server?\n"
},
{
	"uri": "http://mwidener.github.io/lecture4/lec4_2/",
	"title": "Data/Styles in MapBox",
	"tags": [],
	"description": "",
	"content": "Data in Mapbox  When we go to Data we can upload our own spatial files  MBTiles, KML, GPX, GeoJSON, Shapefile (zipped), CSV, GeoTIFF   If the file is vector data it will convert to a vector tile  PBF (mapbox vector tile format â âProtocolbuffer Binary Formatâ)   If the file is raster data it will convert to a raster tile  PNGs    EXAMPLE â Toronto Area Food Retailers (Points, geojson)\nEXAMPLE â US States (Polygons, geojson)\nStyling the Data   We can access the data we uploaded in the style section\n Edit colors, other traits    Limits to this method\n Need javascript to do more complicated styling    We can also download the whole thing as a json file\n Mapbox GL style spec https://www.mapbox.com/mapbox-gl-style-spec/ Open up example to see what else you can edit    EXERCISE  Add Toronto CMA, Toronto DAs, and Toronto Supermarkets as new tilesets  Create a new style   Add the three data layers  Make CMA visible at low zoom levels (higher altitude) Make DAs visible at medium zoom levels Add supermarkets, and stylize   Publish your map  "
},
{
	"uri": "http://mwidener.github.io/lecture3/lec3_2/",
	"title": "GeoJSON geometries",
	"tags": [],
	"description": "",
	"content": "Geometries in geojson are similar to the other online formats we\u0026rsquo;ve explored.  Point = Point Line/polyline = LineString Polygon = Polygon  { \u0026#34;type\u0026#34;: \u0026#34;Point\u0026#34;, \u0026#34;coordinates\u0026#34;: [30,10] } { \u0026#34;type\u0026#34;: \u0026#34;LineString\u0026#34;, \u0026#34;coordinates\u0026#34;: [ [30,10], [10,30],[40,40] ] } { \u0026#34;type\u0026#34;: \u0026#34;Polygon\u0026#34;, \u0026#34;coordinates\u0026#34;: [ [30,10], [40,40], [20,40], [10,20],[30,10] ] } { \u0026#34;type\u0026#34;: \u0026#34;Polygon\u0026#34;, \u0026#34;coordinates\u0026#34;: [ [[35,10], [45,45], [15,40], [10,20],[35,10]], [[20,30], [35,35], [30,20], [20,30]] ] } "
},
{
	"uri": "http://mwidener.github.io/lecture1/lec1_2/",
	"title": "Programming",
	"tags": [],
	"description": "",
	"content": "Programming is important! We\u0026rsquo;ll be using three languages:\n JavaScript HTML CSS  Why do we need to program?  You can handle bigger projects and more data through automation and logic. This is the standard way that serious web mapping and web GIS is done. It looks great on your resume!  HTML  HyperText Markup Language  Files sent from servers to personal computers They tell the computer things like what to display or where to get data   HTML elements tell us things about where text should go, how it should be displayed, if an image should be centered  We express HTML elements through HTML tags  \u0026lt;html\u0026gt; ... \u0026lt;/html\u0026gt;     http://html.com/document/  CSS  Cascading Style Sheet  âStyle sheetâ code used to style the content of a web page. Interacts with HTML and describes how things should be sized, coloured, etc.  Can be more complicated     Helps separate the website content from website styling  Reduces repetition if you have multiple HTML docs   http://www.w3schools.com/css/default.asp  JavaScript  The de facto lingua franca of the world wide web Controls the behaviour of a webpage  HTML and CSS just describe   Javascript is a programming language  Conditional statements Logic Looping Data manipulation/handling    "
},
{
	"uri": "http://mwidener.github.io/lecture2/lec2_2/",
	"title": "Classification of Web Maps",
	"tags": [],
	"description": "",
	"content": "Classifying Web Maps A 2001 paper by Jan Kraak attempted to classify web maps  Web Maps  static maps  view only interactive interface/contents   dynamic maps  view only interactive interface/contents      Other ways to think about web maps  Analytical web maps  Basically GIS online   Animated/Realtime web maps  Constantly updated maps showing changes in spatial locations   Collaborative web maps  Teams contribute to a single spatial representation online   Online atlases  Static collections of production quality maps that were formerly printed as books, can be interactive   Static web maps  Pages with maps that have no interactivity    "
},
{
	"uri": "http://mwidener.github.io/introduction/",
	"title": "Course Information",
	"tags": [],
	"description": "",
	"content": "This section has information about the course structure and where you can go to get help. "
},
{
	"uri": "http://mwidener.github.io/lecture8/lec8_3/",
	"title": "Setting up geojson",
	"tags": [],
	"description": "",
	"content": "We need our geojson files to act like javascript variables. How do we do this? All it takes is a simple tweak to the geojson file.\nSimply add var mygeojsonfilename =  before the first curly bracket.\nSo for example:\nvar utmToUTSG = { \u0026#34;type\u0026#34;: \u0026#34;FeatureCollection\u0026#34;, \u0026#34;features\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;Feature\u0026#34;, \u0026#34;properties\u0026#34;: {}, \u0026#34;geometry\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;LineString\u0026#34;, \u0026#34;coordinates\u0026#34;: [ [ -79.66263771057129, 43.54487765059555 ], [ -79.65937614440918, 43.54276236856476 ], [ -79.65568542480469, 43.54126918362085 ], [ -79.65293884277344, 43.53884267921116 ], [ -79.65105056762695, 43.53598052284858 ], [ -79.64890480041502, 43.53486051163794 ], [ -79.62607383728027, 43.54773938461675 ], [ -79.62109565734863, 43.54873473851718 ], [ -79.61766242980956, 43.55215614218778 ], [ -79.6168041229248, 43.55259157963129 ], [ -79.61302757263184, 43.552218347729465 ], [ -79.61139678955078, 43.552218347729465 ], [ -79.61088180541992, 43.55582615929037 ], [ -79.60521697998047, 43.56310332874207 ], [ -79.60375785827637, 43.56478255071955 ], [ -79.59302902221678, 43.574732535219056 ], [ -79.5736312866211, 43.592203217066874 ], [ -79.5615291595459, 43.60326743161359 ], [ -79.55225944519043, 43.611471040985265 ], [ -79.54848289489746, 43.61395676232749 ], [ -79.53972816467284, 43.615386005576845 ], [ -79.51981544494629, 43.61930071530575 ], [ -79.48419570922852, 43.62675660019726 ], [ -79.47999000549316, 43.62837192004496 ], [ -79.47535514831543, 43.63185092304897 ], [ -79.47097778320312, 43.63427368118269 ], [ -79.46591377258301, 43.63688269609634 ], [ -79.46205139160156, 43.63831139435743 ], [ -79.45638656616211, 43.63911890443505 ], [ -79.4502067565918, 43.638559860152576 ], [ -79.44419860839844, 43.63700693207628 ], [ -79.43449974060057, 43.63290700911552 ], [ -79.43098068237305, 43.632472152394485 ], [ -79.4245433807373, 43.633776713117946 ], [ -79.41329956054688, 43.63706904996992 ], [ -79.41003799438477, 43.63744175598323 ], [ -79.40291404724121, 43.63775234256172 ], [ -79.3927001953125, 43.63831139435743 ], [ -79.39209938049315, 43.638559860152576 ], [ -79.39987778663635, 43.657925383503695 ], [ -79.39809143543243, 43.65827855515278 ], [ -79.39885318279266, 43.660036620475 ], [ -79.39863324165344, 43.6601103571893 ], [ -79.3995988368988, 43.66243107697202 ] ] } } ] } Next you need to reference this file in your HTML file. Add the following to your HTML, inside the body tags. You can likely reference these files locally on your own hard drive, but if that doesn\u0026rsquo;t work, you can use the links I have provided below:\n\u0026lt;body\u0026gt; \u0026lt;div id=\u0026#39;map\u0026#39; class=\u0026#39;map\u0026#39;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!--Insert your geojson files here--\u0026gt; \u0026lt;script src=\u0026#39;https://mwidener.github.io/lecture8/utmToUTSG.geojson\u0026#39;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#39;https://mwidener.github.io/lecture8/canadianAirports.geojson\u0026#39;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#39;https://mwidener.github.io/lecture8/canadianProvinces.geojson\u0026#39;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#39;./turfExamples1.js\u0026#39;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; Now we can access these geojson files as variables (whatever you named them\u0026hellip;in the above example I have three variables canadianAirports, canadianProvinces, and utmToUTSG).\n"
},
{
	"uri": "http://mwidener.github.io/lecture7/lec7_3/",
	"title": "Choropleth Maps",
	"tags": [],
	"description": "",
	"content": "What if we want to visualize the spatial information embedded in our spatial layers?  Thankfully, building choropleth maps has become relatively easy in Mapbox. Before, it was necessary to either add multiple layers with filters either manually or programmatically.  For example:  layer 1 all provinces with population less than 300,000 are light red layer 2 all provinces with population more than 300,000 and less than 1,000,000 are red layer 3 all provinces with population more than 1,000,000 are dark red      Now it\u0026rsquo;s much easier thanks to the interpolate tool: https://docs.mapbox.com/mapbox-gl-js/style-spec/expressions/#interpolate\n We can integrate some code about interpolating between colors given some data input into the fill-color property of a fill layer.  Relevant example from mapbox  Helpful hint: to find the color scheme for your map, use colorbrewer Let\u0026rsquo;s try the following using the following example data: median income DAs.  Example var map = new mapboxgl.Map({ container: \u0026#39;map\u0026#39;, style: \u0026#39;mapbox://styles/mapbox/streets-v8\u0026#39;, center: [-79.45312, 43.7], zoom: 10 }); map.on(\u0026#39;style.load\u0026#39;, function(){ //Normal add source code  map.addSource(\u0026#39;toronto_DAs\u0026#39;, { \u0026#39;type\u0026#39;: \u0026#39;vector\u0026#39;, \u0026#39;url\u0026#39;: \u0026#39;mapbox://mwidener.aipfqxb4\u0026#39; }); map.addLayer({ \u0026#34;id\u0026#34;: \u0026#34;DA-layer\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;fill\u0026#34;, \u0026#34;source\u0026#34;: \u0026#34;toronto_DAs\u0026#34;, \u0026#34;source-layer\u0026#34;: \u0026#34;toronto_censusDA_income-3p3din\u0026#34;, \u0026#34;paint\u0026#34;: { \u0026#34;fill-color\u0026#34;: [ \u0026#39;interpolate\u0026#39;, [\u0026#39;linear\u0026#39;], [\u0026#39;to-number\u0026#39;,[\u0026#39;get\u0026#39;, \u0026#39;medIncome\u0026#39;],0], // get a number, but if provided with a non-number default to 0  0, \u0026#39;#edf8fb\u0026#39;, 30000, \u0026#39;#b2e2e2\u0026#39;, 50000, \u0026#39;#66c2a4\u0026#39;, 70000, \u0026#39;#2ca25f\u0026#39;, 80000, \u0026#39;#006d2c\u0026#39; ], \u0026#34;fill-opacity\u0026#34;: 0.8, \u0026#34;fill-outline-color\u0026#34;: \u0026#39;black\u0026#39; } }); }); // FIRST ADD A POPUP OBJECT var popup = new mapboxgl.Popup({ closeButton: false, closeOnClick: false }); // NEXT DEFINE WHEN YOU WANT THE POPUP TO HAPPEN map.on(\u0026#39;mousemove\u0026#39;,\u0026#39;DA-layer\u0026#39;, function(e){ popup.remove(); //If a popup already exists, get rid of it!  //get the rendered features that belong to the provinces-fill layer  var features = map.queryRenderedFeatures(e.point, { \u0026#34;layers\u0026#34;: [\u0026#34;DA-layer\u0026#34;]} ); //if there is a feature there, do the following  if (features.length \u0026gt; 0){ console.log(features[0]); //print out the first element of the features array that was selected  var feature = features[0]; //store the first element as \u0026#39;feature\u0026#39;  popup.setLngLat(e.lngLat); //place the popup window at the lng and lat where your click event happened  //add stuff to the pop up:  popup.setHTML(\u0026#34;\u0026lt;b\u0026gt;The median income here is: $\u0026lt;/b\u0026gt;\u0026#34; + feature.properties.medIncome + \u0026#34;\u0026lt;br\u0026gt;\u0026#34;); popup.addTo(map); //finally add the pop up to the map  } //if there are no features under the click, then print this in the web browser console  else{ console.log(\u0026#34;no features from layer here...\u0026#34;) } }); "
},
{
	"uri": "http://mwidener.github.io/lecture6/lec6_3/",
	"title": "Mouse Move Event Example",
	"tags": [],
	"description": "",
	"content": "Let\u0026rsquo;s try this out with a mousemove event.  We can use the mousemove event to highlight a spatial object when our mouse is hovering over it. What we need:  Standard HTML file Javascript file with standard map object code Standard add source code Standard add layer code   Things that are a bit different:  We need a second add layer code section We will use the filter option to initially display NO spatial objects from the layer As the mouse moves, we will change the filter so that it triggers the display of spatial objects over which the mouse hovers    mapboxgl.accessToken = \u0026#39;\u0026lt;your access Token\u0026gt;\u0026#39;; var map = new mapboxgl.Map({ container: \u0026#39;map\u0026#39;, //container id in HTML  style: \u0026#39;mapbox://styles/mwidener/cjcouhmq03m9t2rmvgnmmsr1l\u0026#39;, //stylesheet location  center: [-102.542951,59.650162], // starting point, longitude/latitude  zoom: 2.5 // starting zoom level }); //SIMPLY ADDING A POLYGON OF PROVINCES FROM MAPBOX VECTOR TILES map.on(\u0026#39;style.load\u0026#39;, function(){ map.addSource(\u0026#39;provinces\u0026#39;,{ \u0026#39;type\u0026#39;: \u0026#39;vector\u0026#39;, \u0026#39;url\u0026#39;: \u0026#39;mapbox://mwidener.6sokce8y\u0026#39; }); map.addLayer({ \u0026#39;id\u0026#39;: \u0026#39;provinces-fill\u0026#39;, \u0026#39;type\u0026#39;: \u0026#39;fill\u0026#39;, \u0026#39;source\u0026#39;: \u0026#39;provinces\u0026#39;, \u0026#39;layout\u0026#39;: {}, \u0026#39;paint\u0026#39;: { \u0026#39;fill-color\u0026#39;: \u0026#39;red\u0026#39;, \u0026#39;fill-opacity\u0026#39;: 1, \u0026#39;fill-outline-color\u0026#39;: \u0026#39;white\u0026#39; }, \u0026#39;source-layer\u0026#39;:Â \u0026#34;CanadianProvinces-5onu90\u0026#34; }); //Add another visualization of the polygon of provinces. Note we do not add the source again!  map.addLayer({ \u0026#39;id\u0026#39;: \u0026#39;provinces-hl\u0026#39;, //remember to change the name - this is our \u0026#34;highlight\u0026#34; layer (hence \u0026#39;-hl\u0026#39;)  \u0026#39;type\u0026#39;: \u0026#39;fill\u0026#39;, \u0026#39;source\u0026#39;: \u0026#39;provinces\u0026#39;, \u0026#39;layout\u0026#39;: {}, \u0026#39;paint\u0026#39;: { \u0026#39;fill-color\u0026#39;: \u0026#39;grey\u0026#39;, \u0026#39;fill-opacity\u0026#39;: 1, \u0026#39;fill-outline-color\u0026#39;: \u0026#39;black\u0026#39; }, \u0026#39;source-layer\u0026#39;: \u0026#34;CanadianProvinces-5onu90\u0026#34;, \u0026#39;filter\u0026#39;: [\u0026#34;==\u0026#34;,\u0026#34;PRID\u0026#34;,\u0026#34;\u0026#34;] //Here is a filter that doesn\u0026#39;t select anything  }); map.addLayer({ \u0026#39;id\u0026#39;: \u0026#39;provinces-hl-lowpop\u0026#39;, //remember to change the name - this is our \u0026#34;highlight\u0026#34; layer (hence \u0026#39;-hl\u0026#39;)  \u0026#39;type\u0026#39;: \u0026#39;fill\u0026#39;, \u0026#39;source\u0026#39;: \u0026#39;provinces\u0026#39;, \u0026#39;layout\u0026#39;: {}, \u0026#39;paint\u0026#39;: { \u0026#39;fill-color\u0026#39;: \u0026#39;green\u0026#39;, \u0026#39;fill-opacity\u0026#39;: 1, \u0026#39;fill-outline-color\u0026#39;: \u0026#39;white\u0026#39; }, \u0026#39;source-layer\u0026#39;: \u0026#34;CanadianProvinces-5onu90\u0026#34;, \u0026#39;filter\u0026#39;: [\u0026#34;==\u0026#34;,\u0026#34;PRID\u0026#34;,\u0026#34;\u0026#34;] //Here is a filter that doesn\u0026#39;t select anything  }); map.addLayer({ \u0026#39;id\u0026#39;: \u0026#39;provinces-hl-highpop\u0026#39;, //remember to change the name - this is our \u0026#34;highlight\u0026#34; layer (hence \u0026#39;-hl\u0026#39;)  \u0026#39;type\u0026#39;: \u0026#39;fill\u0026#39;, \u0026#39;source\u0026#39;: \u0026#39;provinces\u0026#39;, \u0026#39;layout\u0026#39;: {}, \u0026#39;paint\u0026#39;: { \u0026#39;fill-color\u0026#39;: \u0026#39;blue\u0026#39;, \u0026#39;fill-opacity\u0026#39;: 1, \u0026#39;fill-outline-color\u0026#39;: \u0026#39;white\u0026#39; }, \u0026#39;source-layer\u0026#39;: \u0026#34;CanadianProvinces-5onu90\u0026#34;, \u0026#39;filter\u0026#39;: [\u0026#34;==\u0026#34;,\u0026#34;PRID\u0026#34;,\u0026#34;\u0026#34;] //Here is a filter that doesn\u0026#39;t select anything  }); }) //********************************* //HOVER EVENTS 1 //********************************* map.on(\u0026#39;mousemove\u0026#39;, \u0026#39;provinces-fill\u0026#39;, function(e) { var features = e.features; //e is passed to the function - \u0026#39;e\u0026#39; is the event info triggered  if(features.length \u0026gt; 0){ //if there are features in the e.features array then go into the conditional  var feature = e.features[0]; //pull out the first feature element in the features array  console.log(feature.properties) //print out the feature properties in the browser console  if(feature.properties.POP \u0026gt; 1000000){ //if the POP attribute of the features is \u0026gt; 1 mill, make it blue  map.setPaintProperty(\u0026#34;provinces-hl\u0026#34;,\u0026#34;fill-color\u0026#34;,\u0026#34;blue\u0026#34;); console.log(\u0026#39;pop is: \u0026#39; + feature.properties.POP); //print pop value in console  } else{ map.setPaintProperty(\u0026#34;provinces-hl\u0026#34;,\u0026#34;fill-color\u0026#34;,\u0026#34;green\u0026#34;); //if POP is less than 1 mill, make it green  console.log(\u0026#39;pop is: \u0026#39; + feature.properties.POP); //print pop value in console  } map.setFilter(\u0026#34;provinces-hl\u0026#34;,[\u0026#34;==\u0026#34;, \u0026#34;PRID\u0026#34;, feature.properties.PRID]); //set the filter of the provinces-hl to display  //the feature you\u0026#39;re hovering over  } }); map.on(\u0026#39;mouseenter\u0026#39;,\u0026#39;provinces-fill\u0026#39;,function(e){ //when your mouse enters the provinces-fill layer  map.getCanvas().style.cursor = \u0026#39;pointer\u0026#39;; //change the mouse cursor to a pointer  }); map.on(\u0026#39;mouseleave\u0026#39;,\u0026#39;provinces-fill\u0026#39;,function(e){ map.getCanvas().style.cursor = \u0026#39;\u0026#39;; // when the mouse leaves the provinces fill layer  map.setFilter(\u0026#34;provinces-hl\u0026#34;,[\u0026#34;==\u0026#34;, \u0026#34;PRID\u0026#34;,\u0026#34;\u0026#34;]); //change back to normal cursor, also remove filters to make  //provinces-hl layer invisible }); //********************************* //HOVER EVENTS 1 //*********************************  //********************************* //HOVER EVENTS VERSION 2 //********************************* /*map.on(\u0026#39;mousemove\u0026#39;, function(e){ var features = map.queryRenderedFeatures(e.point, { \u0026#34;layers\u0026#34;: [\u0026#34;provinces-fill\u0026#34;]} ); if(features.length \u0026gt; 0){ var feature = features[0]; console.log(feature.properties) if(feature.properties.POP \u0026gt; 1000000){ map.setPaintProperty(\u0026#34;provinces-hl\u0026#34;,\u0026#34;fill-color\u0026#34;,\u0026#34;blue\u0026#34;); console.log(\u0026#39;pop is: \u0026#39; + feature.properties.POP); } else{ map.setPaintProperty(\u0026#34;provinces-hl\u0026#34;,\u0026#34;fill-color\u0026#34;,\u0026#34;green\u0026#34;); console.log(\u0026#39;pop is: \u0026#39; + feature.properties.POP); } map.setFilter(\u0026#34;provinces-hl\u0026#34;,[\u0026#34;==\u0026#34;, \u0026#34;PRID\u0026#34;, feature.properties.PRID]); } }); map.on(\u0026#39;mouseenter\u0026#39;,\u0026#39;provinces-fill\u0026#39;,function(e){ map.getCanvas().style.cursor = \u0026#39;pointer\u0026#39;; }); map.on(\u0026#39;mouseleave\u0026#39;,\u0026#39;provinces-fill\u0026#39;,function(e){ map.getCanvas().style.cursor = \u0026#39;\u0026#39;; }); */ //********************************* //HOVER EVENTS VERSION 2 //*********************************  "
},
{
	"uri": "http://mwidener.github.io/lecture5/lec5_3/",
	"title": "Adding Vector Data",
	"tags": [],
	"description": "",
	"content": "If we want to add data from the Dataset section of our mapbox portal, we can make a direct reference to those data using the addSource() method.\nmap.addSource(\u0026#39;my_data\u0026#39;,{ \u0026#34;type\u0026#34;: \u0026#34;vector\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;mapbox://mwidener.3259jdk2\u0026#34; //link to data from mapbox site }) "
},
{
	"uri": "http://mwidener.github.io/lecture4/lec4_3/",
	"title": "JS, MapBox, &amp; Maps",
	"tags": [],
	"description": "",
	"content": "Recap  Weâve learned about  The history of web maps Common data structures Raster and vector tiles How to upload data \u0026amp; create tiles in Mapbox How to stylize tiles in Mapbox    We could make our maps manually, but\u0026hellip;  Time consuming Hard to automatically updates Limited features available to us  A programming interface will allow for faster updates and more advanced features.  We can also customize our projects way more than we could manually We can also integrate interaction, loops, conditionals, etc.  We\u0026rsquo;ll use JavaScript.  Supported by all modern web browsers Object oriented Lots of great APIs  Application programming interface   APIs  Essentially a tool box that you access through computer code Pre-written methods/functions that you can call that complete common tasks    "
},
{
	"uri": "http://mwidener.github.io/lecture3/lec3_3/",
	"title": "GeoJSON polygons",
	"tags": [],
	"description": "",
	"content": "Polygons can be quite complicated. GeoJSON allows for an easy way to describe polygons with (multiple) interior gaps.  Polgyon  LinearRing (exterior)  Positions   LinearRing (interior)  Positions   LinearRing (interior)  Positions      Only 1 exterior ring and then as many interior rings as needed { \u0026#34;type\u0026#34;: \u0026#34;Polygon\u0026#34;, \u0026#34;coordinates\u0026#34;: [ [[35,10], [45,45], [15,40], [10,20],[35,10]], [[20,30], [35,35], [30,20], [20,30]] ] } Care also should be taken with coordinate ordering in GeoJSON Polygons The exterior ring should be counterclockwise Interior rings should be clockwise Why does this matter? The classic Chamberlain \u0026amp; Duquette algorithm for calculating the area of a polygon on a sphere has the nice property that counterclockwise-wound polygons have positive area and clockwise yield negative. If you ensure winding order, calculating the area of a polygon with holes is as simple as adding the areas of all rings. Winding order also has a default meaning in Canvas and other drawing APIs: drawing a path with counterclockwise order within one with clockwise order will cut it out of the filled image. source: More than you ever wanted to know about geojson\n"
},
{
	"uri": "http://mwidener.github.io/lecture1/lec1_3/",
	"title": "Basic Programming Concepts",
	"tags": [],
	"description": "",
	"content": "Basic Programming Concepts Variable assignment var x = 12 var blah = \u0026#34;some text that i\u0026#39;m writing right now!\u0026#34; blah = x y = blah - x Arrays var universities = [\u0026#34;UofT\u0026#34;, \u0026#34;Western\u0026#34;, \u0026#34;McMaster\u0026#34;]; universities[0] //will return \u0026#34;UofT\u0026#34; Conditional statements if (condition) { // block of code to be executed if the condition is true } An example from https://www.w3schools.com/js/js_if_else.asp\nif (hour \u0026lt; 18) { greeting = \u0026#34;Good day\u0026#34;; } else { greeting = \u0026#34;Good evening\u0026#34; } What would this return now?\nLoops var i; for (i = 0; i \u0026lt; universities.length; i++) { text += universities[i] + \u0026#34;\u0026lt;br\u0026gt;\u0026#34;; } /*will print: UofT Western McMaster */ To the board! "
},
{
	"uri": "http://mwidener.github.io/lecture2/lec2_3/",
	"title": "Making Web Maps",
	"tags": [],
	"description": "",
	"content": "How do we make web maps Approach depends on factors that are similar to how you develop conventional GISystems  Audience Scope Refresh rate Collaboration strategy  New dimensions  interactivity Realtime linkages to other online resources  Group exercise!  Find an online map on a website that isnât a major web map provider (e.g. google, microsoft, etc.)  Describe the purpose of the map List any interactivity/features Does the map serve its purpose well? What additional features might be nice to have?    "
},
{
	"uri": "http://mwidener.github.io/lecture1/",
	"title": "Lecture 1: Intro",
	"tags": [],
	"description": "",
	"content": "Lecture 1 What are web maps?  What is this class about?  Investigating the history of web maps Exploring a range of web mapping tools Exploring a range of development methods Group work developing your own web map  "
},
{
	"uri": "http://mwidener.github.io/lecture7/lec7_4/",
	"title": "Adding a legend...",
	"tags": [],
	"description": "",
	"content": "Let\u0026rsquo;s add a legend to our choropleth map! To do this, we\u0026rsquo;ll want to move to our HTML document. In mapbox gl js, our legend is going to be an HTML element layered on top of our map. To achieve this we need to use the tag to define a division where the legend will go, and the tag to define how the legend will look.\nThe tag defines a division in the HTML document. Recall, we\u0026rsquo;re already doing this with the following code to create a place for our webmap: \u0026lt;div id='map' class='map'\u0026gt; \u0026lt;/div\u0026gt;.\nIn this code we create a division element with an id we call \u0026lsquo;map\u0026rsquo;, and then assign it a class of \u0026lsquo;map\u0026rsquo;, which refers to the styling defined in within the tag. We could modify the \u0026ldquo;#map\u0026rdquo; part of the style section in the HTML to mess with how the map is displayed in the window.\nHow do we add a legend? First we want to modify the style tags in our HTML code to add three new style guides:\n .legend .legend h4 .legend div span  The first addition will dictate how the whole legend division is styled. The second will effect anything that used the tag. The third will effect anything in a or tag. More simply, .legend establishes the style norms for the legend object, .legend h4 establishes style norms for the legend title, and .legend div span will establish norms for the circle objects showing different colors in the legend.\n\u0026lt;style\u0026gt; body { margin:0; padding:0; } #map { position:absolute; top:0; bottom:0; width:100%; } .legend { background-color: #fff; border-radius: 3px; bottom: 30px; box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1); font: 32px/32px \u0026#39;Helvetica Neue\u0026#39;, Arial, Helvetica, sans-serif; padding: 20px; position: absolute; right: 10px; z-index: 1; } .legend h4 { margin: 0 0 10px; } .legend div span { border-radius: 50%; display: inline-block; height: 20px; margin-right: 5px; width: 20px; } \u0026lt;/style\u0026gt; Next, we need to insert the actual tags. Before we just had a for the map and then the line pointing the html file to the .js code. Now we insert the following to make a legend:\n\u0026lt;body\u0026gt; \u0026lt;div id=\u0026#39;map\u0026#39; class=\u0026#39;map\u0026#39;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!-- Legend goes here! --\u0026gt; \u0026lt;div id=\u0026#39;legend\u0026#39; class=\u0026#39;legend\u0026#39;\u0026gt; \u0026lt;h4\u0026gt;Median Income\u0026lt;/h4\u0026gt; \u0026lt;!-- Legend title --\u0026gt; \u0026lt;div\u0026gt;\u0026lt;span style=\u0026#34;background-color: #edf8fb\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;$0-$30,000/no data\u0026lt;/div\u0026gt; \u0026lt;!-- a \u0026#39;subdivision showing a colored circle and then text describing it\u0026#39; --\u0026gt; \u0026lt;div\u0026gt;\u0026lt;span style=\u0026#34;background-color: #b2e2e2\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;$30,000-$50,000\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;\u0026lt;span style=\u0026#34;background-color: #66c2a4\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;$50,000-$70,000\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;\u0026lt;span style=\u0026#34;background-color: #2ca25f\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;$70,000-$90,000\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;\u0026lt;span style=\u0026#34;background-color: #006d2c\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;\u0026gt; $90,000\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!-- Legend ends here --\u0026gt; \u0026lt;script src=\u0026#39;./choropleth_legend-2020.js\u0026#39;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; Notice how the colors correspond exactly to the colors we selected when making our choropleth map.\nAll together it will look like the below code. Try adjusting the various properties to see how they affect the way the legend looks. Try making the spacing between elements bigger and reducing the size of the text.\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=utf-8 /\u0026gt; \u0026lt;title\u0026gt;Median Income in Toronto\u0026lt;/title\u0026gt; \u0026lt;meta name=\u0026#39;viewport\u0026#39; content=\u0026#39;initial-scale=1,maximum-scale=1,user-scalable=no\u0026#39; /\u0026gt; \u0026lt;script src=\u0026#34;https://api.mapbox.com/mapbox-gl-js/v1.7.0/mapbox-gl.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;link href=\u0026#34;https://api.mapbox.com/mapbox-gl-js/v1.7.0/mapbox-gl.css\u0026#34; rel=\u0026#34;stylesheet\u0026#34; /\u0026gt; \u0026lt;style\u0026gt; body { margin:0; padding:0; } #map { position:absolute; top:0; bottom:0; width:100%; } .legend { background-color: #fff; border-radius: 3px; bottom: 30px; box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1); font: 24px/20px \u0026#39;Helvetica Neue\u0026#39;, Arial, Helvetica, sans-serif; padding: 20px; position: absolute; right: 10px; z-index: 1; } .legend h4 { margin: 0 0 10px; } .legend div span { border-radius: 50%; display: inline-block; height: 20px; margin-right: 5px; width: 20px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#39;map\u0026#39; class=\u0026#39;map\u0026#39;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#39;legend\u0026#39; class=\u0026#39;legend\u0026#39;\u0026gt; \u0026lt;h4\u0026gt;Median Income\u0026lt;/h4\u0026gt; \u0026lt;!-- Legend title --\u0026gt; \u0026lt;div\u0026gt;\u0026lt;span style=\u0026#34;background-color: #edf8fb\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;$0/no data\u0026lt;/div\u0026gt; \u0026lt;!-- a \u0026#39;subdivision showing a colored circle and then text describing it\u0026#39; --\u0026gt; \u0026lt;div\u0026gt;\u0026lt;span style=\u0026#34;background-color: #b2e2e2\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;$30,000\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;\u0026lt;span style=\u0026#34;background-color: #66c2a4\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;$50,000\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;\u0026lt;span style=\u0026#34;background-color: #2ca25f\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;$70,000\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;\u0026lt;span style=\u0026#34;background-color: #006d2c\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;$80,000\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#39;./choropleth_legend-2020.js\u0026#39;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; "
},
{
	"uri": "http://mwidener.github.io/lecture6/lec6_4/",
	"title": "Mouse click event example",
	"tags": [],
	"description": "",
	"content": "Let\u0026rsquo;s also try this with a mouse click event \u0026hellip; but try to figure this out on your own\u0026hellip; mapboxgl.accessToken = \u0026#39;\u0026lt;your access token\u0026gt;\u0026#39;; var map = new mapboxgl.Map({ container: \u0026#39;map\u0026#39;, //container id in HTML  style: \u0026#39;mapbox://styles/mwidener/cjcouhmq03m9t2rmvgnmmsr1l\u0026#39;, //stylesheet location  center: [-102.542951,59.650162], // starting point, longitude/latitude  zoom: 2.5 // starting zoom level }); //SIMPLY ADDING A POLYGON OF PROVINCES FROM MAPBOX VECTOR TILES map.on(\u0026#39;style.load\u0026#39;, function(){ map.addSource(\u0026#39;provinces\u0026#39;,{ \u0026#39;type\u0026#39;: \u0026#39;vector\u0026#39;, \u0026#39;url\u0026#39;: \u0026#39;mapbox://mwidener.6sokce8y\u0026#39; }); map.addLayer({ \u0026#39;id\u0026#39;: \u0026#39;provinces-fill\u0026#39;, \u0026#39;type\u0026#39;: \u0026#39;fill\u0026#39;, \u0026#39;source\u0026#39;: \u0026#39;provinces\u0026#39;, \u0026#39;layout\u0026#39;: {}, \u0026#39;paint\u0026#39;: { \u0026#39;fill-color\u0026#39;: \u0026#39;red\u0026#39;, \u0026#39;fill-opacity\u0026#39;: 1, \u0026#39;fill-outline-color\u0026#39;: \u0026#39;white\u0026#39; }, \u0026#39;source-layer\u0026#39;:Â \u0026#34;CanadianProvinces-5onu90\u0026#34; }); //Add another visualization of the polygon of provinces. Note we do not add the source again!  map.addLayer({ \u0026#39;id\u0026#39;: \u0026#39;provinces-hl\u0026#39;, //remember to change the name - this is our \u0026#34;highlight\u0026#34; layer (hence \u0026#39;-hl\u0026#39;)  \u0026#39;type\u0026#39;: \u0026#39;fill\u0026#39;, \u0026#39;source\u0026#39;: \u0026#39;provinces\u0026#39;, \u0026#39;layout\u0026#39;: {}, \u0026#39;paint\u0026#39;: { \u0026#39;fill-color\u0026#39;: \u0026#39;grey\u0026#39;, \u0026#39;fill-opacity\u0026#39;: 1, \u0026#39;fill-outline-color\u0026#39;: \u0026#39;black\u0026#39; }, \u0026#39;source-layer\u0026#39;: \u0026#34;CanadianProvinces-5onu90\u0026#34;, \u0026#39;filter\u0026#39;: [\u0026#34;==\u0026#34;,\u0026#34;PRID\u0026#34;,\u0026#34;\u0026#34;] //Here is a filter that doesn\u0026#39;t select anything  }); map.addLayer({ \u0026#39;id\u0026#39;: \u0026#39;provinces-hl-lowpop\u0026#39;, //remember to change the name - this is our \u0026#34;highlight\u0026#34; layer (hence \u0026#39;-hl\u0026#39;)  \u0026#39;type\u0026#39;: \u0026#39;fill\u0026#39;, \u0026#39;source\u0026#39;: \u0026#39;provinces\u0026#39;, \u0026#39;layout\u0026#39;: {}, \u0026#39;paint\u0026#39;: { \u0026#39;fill-color\u0026#39;: \u0026#39;green\u0026#39;, \u0026#39;fill-opacity\u0026#39;: 1, \u0026#39;fill-outline-color\u0026#39;: \u0026#39;white\u0026#39; }, \u0026#39;source-layer\u0026#39;: \u0026#34;CanadianProvinces-5onu90\u0026#34;, \u0026#39;filter\u0026#39;: [\u0026#34;==\u0026#34;,\u0026#34;PRID\u0026#34;,\u0026#34;\u0026#34;] //Here is a filter that doesn\u0026#39;t select anything  }); map.addLayer({ \u0026#39;id\u0026#39;: \u0026#39;provinces-hl-highpop\u0026#39;, //remember to change the name - this is our \u0026#34;highlight\u0026#34; layer (hence \u0026#39;-hl\u0026#39;)  \u0026#39;type\u0026#39;: \u0026#39;fill\u0026#39;, \u0026#39;source\u0026#39;: \u0026#39;provinces\u0026#39;, \u0026#39;layout\u0026#39;: {}, \u0026#39;paint\u0026#39;: { \u0026#39;fill-color\u0026#39;: \u0026#39;blue\u0026#39;, \u0026#39;fill-opacity\u0026#39;: 1, \u0026#39;fill-outline-color\u0026#39;: \u0026#39;white\u0026#39; }, \u0026#39;source-layer\u0026#39;: \u0026#34;CanadianProvinces-5onu90\u0026#34;, \u0026#39;filter\u0026#39;: [\u0026#34;==\u0026#34;,\u0026#34;PRID\u0026#34;,\u0026#34;\u0026#34;] //Here is a filter that doesn\u0026#39;t select anything  }); }) //********************************* //CLICK EVENTS VERSION 1 //********************************* map.on(\u0026#39;click\u0026#39;,\u0026#39;provinces-fill\u0026#39;,function(e){ var features = e.features; console.log(\u0026#39;print: \u0026#39; + features) if(features.length \u0026gt; 0){ var feature = features[0]; //console.log(feature)  var current_filter = map.getFilter(\u0026#34;provinces-hl\u0026#34;); if(current_filter[2] == feature.properties.PRID){ map.setFilter(\u0026#34;provinces-hl\u0026#34;,[\u0026#34;==\u0026#34;, \u0026#34;PRID\u0026#34;, \u0026#34;\u0026#34;]) } else{ map.setFilter(\u0026#34;provinces-hl\u0026#34;,[\u0026#34;==\u0026#34;, \u0026#34;PRID\u0026#34;, feature.properties.PRID]); } } }); map.on(\u0026#39;mouseenter\u0026#39;,\u0026#39;provinces-fill\u0026#39;,function(e){ map.getCanvas().style.cursor = \u0026#39;pointer\u0026#39;; }); map.on(\u0026#39;mouseleave\u0026#39;,\u0026#39;provinces-fill\u0026#39;,function(e){ map.getCanvas().style.cursor = \u0026#39;\u0026#39;; }); //********************************* //CLICK EVENTS VERSION 1 //*********************************  //********************************* //CLICK EVENTS VERSION 2 //********************************* /*map.on(\u0026#39;click\u0026#39;, function(e){ //var point_test = e.point //console.log(\u0026#39;blah: \u0026#39; +point_test); var features = map.queryRenderedFeatures(e.point, { //grab features from the point on which the event \u0026#39;e\u0026#39; occurred \u0026#34;layers\u0026#34;: [\u0026#34;provinces-fill\u0026#34;]} //we\u0026#39;re only interested in features on provinces-fill layer ); if (features.length \u0026gt; 0){ // if there are features to be clicked on (i.e. 1 or more) console.log(features[0]); // print out the feature in the console var feature = features[0]; //move the feature into a variable var current_filter = map.getFilter(\u0026#34;provinces-hl\u0026#34;); //get the current status of the provinces-hl filter if(current_filter[2] == feature.properties.PRID){ //if the filter is currently set to where we clicked map.setFilter(\u0026#34;provinces-hl\u0026#34;,[\u0026#34;==\u0026#34;, \u0026#34;PRID\u0026#34;, \u0026#34;\u0026#34;]) //then we want to remove the filter (i.e. turn off a previous click) } else{ map.setFilter(\u0026#34;provinces-hl\u0026#34;,[\u0026#34;==\u0026#34;, \u0026#34;PRID\u0026#34;, feature.properties.PRID]); //otherwise, we want to set the filter to the //feature we clicked on } } else{ map.setFilter(\u0026#34;provinces-hl\u0026#34;,[\u0026#34;==\u0026#34;, \u0026#34;PRID\u0026#34;, \u0026#34;\u0026#34;]); //if features.length == that means we clicked off our feature layer //so make hl layer invisible } }); map.on(\u0026#39;mouseenter\u0026#39;,\u0026#39;provinces-fill\u0026#39;,function(e){ map.getCanvas().style.cursor = \u0026#39;pointer\u0026#39;; }); map.on(\u0026#39;mouseleave\u0026#39;,\u0026#39;provinces-fill\u0026#39;,function(e){ map.getCanvas().style.cursor = \u0026#39;\u0026#39;; }); */ //********************************* //CLICK EVENTS VERSION 2 //*********************************  "
},
{
	"uri": "http://mwidener.github.io/lecture5/lec5_4/",
	"title": "Adding Layers",
	"tags": [],
	"description": "",
	"content": "OK, so now we\u0026rsquo;ve added data, but the data are not yet displayed in the map. We have to tell mapbox how we want these data to be presented.\nTo do this we use the addLayer() method.\nhttps://docs.mapbox.com/mapbox-gl-js/style-spec/layers/\nFor geojson: map.addLayer({ \u0026#39;id\u0026#39;: \u0026#39;a_layer_name_as_string\u0026#39;, \u0026#39;type\u0026#39;: \u0026#39;fill\u0026#39;, //this can be fill for polygon, line for lines, or circle for points \u0026#39;source\u0026#39;: \u0026#39;the_source_ID_from_addSource()\u0026#39;, \u0026#39;layout\u0026#39;: {}, \u0026#39;paint\u0026#39;: { //a bunch of parameters that allow you to customize the display  \u0026#39;fill-color\u0026#39;: \u0026#39;#f08\u0026#39;, \u0026#39;fill-opacity\u0026#39;: 0.4 } }); For vector: map.addLayer({ \u0026#39;id\u0026#39;: \u0026#39;a_layer_name_as_string\u0026#39;, \u0026#39;type\u0026#39;: \u0026#39;fill\u0026#39;, //this can be fill for polygon, line for lines, or circle for points \u0026#39;source\u0026#39;: \u0026#39;the_source_ID_from_addSource()\u0026#39;, \u0026#39;layout\u0026#39;: {}, \u0026#39;paint\u0026#39;: { //a bunch of parameters that allow you to customize the display  \u0026#39;fill-color\u0026#39;: \u0026#39;#f08\u0026#39;, \u0026#39;fill-opacity\u0026#39;: 0.4 }, \u0026#34;source-layer\u0026#34;: \u0026#34;some_layer_label_from_mapbox_data_page\u0026#34; }); Refer to the above documentation link for which paint options you can use for different types of geometries.\n"
},
{
	"uri": "http://mwidener.github.io/lecture4/lec4_4/",
	"title": "MapBox GL JS",
	"tags": [],
	"description": "",
	"content": " Many different APIs out there.  Leaflet \u0026lt;Google, Bing, Yahoo, etc.\u0026gt; Maps API Mapzen Mapbox JS Mapbox GL JS   Weâre going to use Mapbox GL JS  Uses WebGL (web graphics library) 3d/2d graphics in web browsers (desktop/mobile) without plugins.  GPU (graphics processing unit) driven â video game-like graphics  http://eyes.nasa.gov/curiosity/     Open source  maintained by Mapbox: https://github.com/mapbox/mapbox-gl-js      One advantage of using GL/vector tiles vs. raster tiles:  Layers  Mapbox JS and Leaflet have baselayers and overlays  Baselayers: image tiles that make up the basemap, lots of data but not very interactive Overlays: usually vector data like geojson, contain less data but more interactive   Mapbox GL JS sends data to the client, along with certain rules saying how to visualize it â NO DISTINCTION    "
},
{
	"uri": "http://mwidener.github.io/lecture3/lec3_4/",
	"title": "Limits of GeoJSON",
	"tags": [],
	"description": "",
	"content": "The dateline! Lines and polygons are a collection of points The points shoudl be within -180 and 180 degrees longitude Does a LineString go from -179 to 179 longitude go all the way around the world or just across the dateline? Solution: use 179 to 181 \u0026hellip; it\u0026rsquo;s a hack, but it works.\n"
},
{
	"uri": "http://mwidener.github.io/lecture2/lec2_4/",
	"title": "Spatial Data",
	"tags": [],
	"description": "",
	"content": "Spatial Data Review Refresher:  Points Lines Polygons  How do we deal with these things in a computer?\nData Model  a set of constructs for describing and representing selected aspects of the real world in a computer. We need a model because the real world is infinitely complex.  Raster files: ncols 480 nrows 450 xllcorner 378923 yllcorner 4072345 cellsize 30 nodata_value -32768 43 2 45 7 3 56 2 5 23 65 34 6 32 54 57 34 2 2 54 6 ... 35 45 65 34 2 6 78 4 2 6 89 3 2 7 45 23 5 8 4 1 62 ... 43 2 45 7 3 56 2 5 23 65 34 6 32 54 57 34 2 2 54 6 ... 35 45 65 34 2 6 78 4 2 6 89 3 2 7 45 23 5 8 4 1 62 ... 43 2 45 7 3 56 2 5 23 65 34 6 32 54 57 34 2 2 54 6 ... 35 45 65 34 2 6 78 4 2 6 89 3 2 7 45 23 5 8 4 1 62 ... Vector Data Model  More commonly associated with discrete data Concepts Three general geometric types  Point Polyline Polygon    How do these look in the computer? It depends\u0026hellip; At the most basic level: What about shapefiles? This is a lot of information and not particularly efficient. That leads us to web mapping. Are shapefiles the way to go? Well, to understand why they aren\u0026rsquo;t, it\u0026rsquo;s helpful to understand a little about the internet.\n Packet switching  Data are broken into small chunks and passed from an origin to a destination Allows for many routes to the destination computer   Servers  Electronic filing cabinets that pass information when requested   Clients  Computers that get information from servers    "
},
{
	"uri": "http://mwidener.github.io/lecture2/",
	"title": "Lecture 2: Data",
	"tags": [],
	"description": "",
	"content": "What are web maps? Web maps are just maps on the internet. They can be static or interactive \u0026hellip; but nowadays they\u0026rsquo;re mostly interactive.\nEasy way to diffuse spatial information and provide interactivity.\nWeb maps help move geographic information systems and sciences to the world wide web.\nWeb mapping consists of three major components:  geography information the Web  In this class we\u0026rsquo;re moving in a different direction than many of your previous GIS courses. How can we use the web to make mapping useful in new and different ways?\n"
},
{
	"uri": "http://mwidener.github.io/lecture5/lec5_5/",
	"title": "Bringing it all together",
	"tags": [],
	"description": "",
	"content": "Using the supermarket geojson data from last week\u0026hellip;\nexample with both vector tiles and geojson: mapboxgl.accessToken = \u0026#39;pk.eyJ1IjoibXdpZGVuZXIiLCJhIjoibXBKQU85dyJ9.Q6yf1zk7wpnYqpsQfRwVmw\u0026#39;; var map = new mapboxgl.Map({ container: \u0026#39;map\u0026#39;, //container id in HTML  style: \u0026#39;mapbox://styles/mwidener/cikgx8tbm003tapm5o1zquc9m\u0026#39;, //stylesheet location  center: [-79.39, 43.72], // starting point, longitude/latitude  zoom: 10 // starting zoom level }); map.on(\u0026#39;load\u0026#39;, function(){ //ADDING A SOURCE FROM A MAPBOX TILESET - DATA YOU UPLOADED TO MAPBOX STUDIO  map.addSource(\u0026#39;supermarket_data_vector\u0026#39;,{ \u0026#39;type\u0026#39;: \u0026#39;vector\u0026#39;, \u0026#39;url\u0026#39;: \u0026#39;mapbox://mwidener.ck629gt2v0bkm2jmqhtcc41uw-0zmtf\u0026#39; }); map.addLayer({ \u0026#39;id\u0026#39;:\u0026#39;supermarket_vector_layer\u0026#39;, \u0026#39;type\u0026#39;: \u0026#39;circle\u0026#39;, \u0026#39;source\u0026#39;: \u0026#39;supermarket_data_vector\u0026#39;, \u0026#39;layout\u0026#39;: {}, \u0026#39;paint\u0026#39;: { \u0026#39;circle-color\u0026#39;: \u0026#39;red\u0026#39;, \u0026#39;circle-radius\u0026#39;: 10 }, \u0026#39;source-layer\u0026#39;: \u0026#39;supermarkets\u0026#39; //get this from mapbox tileset page  }); //ADDING A GEOJSON SOURCE EXAMPLE  map.addSource(\u0026#39;supermarkets_data\u0026#39;,{ \u0026#39;type\u0026#39;: \u0026#39;geojson\u0026#39;, \u0026#39;data\u0026#39;: \u0026#39;./supermarkets.geojson\u0026#39; }); map.addLayer({ \u0026#39;id\u0026#39;: \u0026#39;supermarkets_layer\u0026#39;, \u0026#39;type\u0026#39;: \u0026#39;circle\u0026#39;, \u0026#39;source\u0026#39;: \u0026#39;supermarkets_data\u0026#39;, \u0026#39;layout\u0026#39;: {}, \u0026#39;paint\u0026#39;: { \u0026#39;circle-color\u0026#39;: \u0026#39;blue\u0026#39;, \u0026#39;circle-radius\u0026#39;: 15 } }, \u0026#39;supermarket_vector_layer\u0026#39;); // puts this layer behind the \u0026#39;supermarket_vector_layer\u0026#39; on the map }); "
},
{
	"uri": "http://mwidener.github.io/lecture4/lec4_5/",
	"title": "My 1st MapBox Map",
	"tags": [],
	"description": "",
	"content": "To make our map we\u0026rsquo;ll need at least some HTML code and JavaScript code. We could do it all in one file, but for organizational reasons, we\u0026rsquo;ll create an HTML file and another file for our JavaScript.\nSetting up your html file. The below code has the basics that we\u0026rsquo;ll need to set up our map.\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=utf-8 /\u0026gt; \u0026lt;title\u0026gt;TITLE HERE â shows up in browser tab\u0026lt;/title\u0026gt; \u0026lt;meta name=\u0026#39;viewport\u0026#39; content=\u0026#39;initial-scale=1,maximum-scale=1,user-scalable=no\u0026#39; /\u0026gt; \u0026lt;!-- Adjusts the screen width to the device accessing the web map --\u0026gt; \u0026lt;script src=\u0026#34;https://api.mapbox.com/mapbox-gl-js/v1.7.0/mapbox-gl.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;!-- Sets up Mapbox GL JS --\u0026gt; \u0026lt;link href=\u0026#34;https://api.mapbox.com/mapbox-gl-js/v1.7.0/mapbox-gl.css\u0026#34; rel=\u0026#34;stylesheet\u0026#34; /\u0026gt; \u0026lt;!-- Sets up Mapbox GL JS --\u0026gt; \u0026lt;!-- below - in file CSS browser set up --\u0026gt; \u0026lt;style\u0026gt; body { margin:0; padding:0; } .map { position:absolute; top:0; bottom:0; width:100%; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;!-- where we put our javascript code --\u0026gt; \u0026lt;div id=\u0026#39;map\u0026#39; class=\u0026#39;map\u0026#39;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!-- browser set up --\u0026gt; \u0026lt;script src=\u0026#39;./MYJAVASCRIPTCODE.js\u0026#39;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;!-- \u0026#34;./\u0026#34; means current directory, so if you put your code elsewhere use that path --\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Setting up your JavaScript file. mapboxgl.accessToken = \u0026#39;\u0026lt;YOUR ACCESS TOKEN HERE\u0026gt;\u0026#39;; var map = new mapboxgl.Map({ container: \u0026#39;map\u0026#39;, //container id in HTML  style: \u0026#39;mapbox://styles/mapbox/streets-v8\u0026#39;, //stylesheet location  center: [-96.7, 60.00], // starting point, longitude/latitude  zoom: 3 // starting zoom level }); Let\u0026rsquo;s try this for real\u0026hellip;  Create HTML/JS code to create a map and then post it on your website.  Create a new style and use that path for your new map.    "
},
{
	"uri": "http://mwidener.github.io/lecture3/",
	"title": "Lecture 3: Data/Viz",
	"tags": [],
	"description": "",
	"content": "Web-based Spatial Data, continued Recall js objects? var mycar = \u0026#34;subaru\u0026#34;; // name: value pairs (name/value separated by colon) var mycar = { make: \u0026#34;Subaru\u0026#34;, model: \u0026#34;Impreza\u0026#34;, year: 2005, states_provinces_driven_through: [\u0026#34;ontario\u0026#34;, \u0026#34;new york\u0026#34;, \u0026#34;michigan\u0026#34;]; }; What would this return? mycar.make This leads us to geoJSON: Geographic Java Script Object Notation GeoJSON is a simple open standard used to store spatial features, alongside non-spatial features. { \u0026#34;type\u0026#34;: \u0026#34;FeatureCollection\u0026#34;, \u0026#34;features\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;Feature\u0026#34;, \u0026#34;geometry\u0026#34;: {\u0026#34;type\u0026#34;: \u0026#34;Point\u0026#34;, \u0026#34;coordinates\u0026#34;: [102.0, 0.5]}, \u0026#34;properties\u0026#34;: {\u0026#34;prop0\u0026#34;: \u0026#34;value0\u0026#34;} }, { \u0026#34;type\u0026#34;: \u0026#34;Feature\u0026#34;, \u0026#34;geometry\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;LineString\u0026#34;, \u0026#34;coordinates\u0026#34;: [ [102.0, 0.0], [103.0, 1.0], [104.0, 0.0], [105.0, 1.0] ] }, \u0026#34;properties\u0026#34;: { \u0026#34;prop0\u0026#34;: \u0026#34;value0\u0026#34;, \u0026#34;prop1\u0026#34;: 0.0 } }, { \u0026#34;type\u0026#34;: \u0026#34;Feature\u0026#34;, \u0026#34;geometry\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;Polygon\u0026#34;, \u0026#34;coordinates\u0026#34;: [ [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0] ] ] }, \u0026#34;properties\u0026#34;: { \u0026#34;prop0\u0026#34;: \u0026#34;value0\u0026#34;, \u0026#34;prop1\u0026#34;: {\u0026#34;this\u0026#34;: \u0026#34;that\u0026#34;} } } ] } "
},
{
	"uri": "http://mwidener.github.io/lecture3/lec3_5/",
	"title": "TopoJSON",
	"tags": [],
	"description": "",
	"content": "TopoJSON  GeoJSON that enforces topological rules  Preserves connections between lines   Preserves adjacency  Useful for network analysis/spatial relations   More complicated mark-up language  Uses concept of arcs    "
},
{
	"uri": "http://mwidener.github.io/lecture2/lec2_5/",
	"title": "Spatial Data for the Web",
	"tags": [],
	"description": "",
	"content": "Other formats more common in web world Many other, compact data structures that work better for online transmission/compression\nOne major format is based off of markup languages.\n What is XML?  Extensible Markup Language Store/transport data Human and machine readable   XML doesnât do anything  Information wrapped in tags XML carries data, HTML designed to display data XML doesnât have predefined tags (e.g. ), HTML does    XML Example: \u0026lt;note\u0026gt; \u0026lt;to\u0026gt;Tove\u0026lt;/to\u0026gt; \u0026lt;from\u0026gt;Jani\u0026lt;/from\u0026gt; \u0026lt;heading\u0026gt;Reminder\u0026lt;/heading\u0026gt; \u0026lt;body\u0026gt;Don\u0026#39;t forget me this weekend!\u0026lt;/body\u0026gt; \u0026lt;/note\u0026gt; A computer program reads the tags and displays the text based on predefined rules\nNOTE To: Tove From: Jani Reminder Don\u0026rsquo;t forget about the milk! "
},
{
	"uri": "http://mwidener.github.io/introduction/syllabus/",
	"title": "Syllabus",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://mwidener.github.io/introduction/instructor_info/",
	"title": "Instructor Information",
	"tags": [],
	"description": "",
	"content": "Prof. Michael Widener email michael michael DOT widener AT utoronto DOT ca\noffice hours: Thursdays 1pm - 3pm Sid Smith Hall 5037\nAdditional resources  Mapbox GL JS API Mapbox GL JS Examples  "
},
{
	"uri": "http://mwidener.github.io/lecture4/",
	"title": "Lecture 4: Mapbox Intro",
	"tags": [],
	"description": "",
	"content": "Introducing Mapbox In this lecture we\u0026rsquo;re going to dive into Mapbox Studio, and then begin to explore the javascript code needed to build our first Mapbox map with an API.\nGo ahead an log in to MapBox and we\u0026rsquo;ll get started\u0026hellip;\n"
},
{
	"uri": "http://mwidener.github.io/lecture3/lec3_6/",
	"title": "GeoJSON editing exercise",
	"tags": [],
	"description": "",
	"content": "Exercise Easy GeoJSON editing http://geojson.io/  Create your path to work, adding points and polygons along the way  Inspect the geojson code that is generated and relate it to the spatial files that are on the map   Next create a geojson file from scratch, and load it into geojson.io Finally, save the geojson file you created and export it as a geojson file  "
},
{
	"uri": "http://mwidener.github.io/lecture2/lec2_6/",
	"title": "GML KML OSM-XML",
	"tags": [],
	"description": "",
	"content": "GML GML defines a variety of object types:\n Features Coordinate reference systems Geometry (simple and complex) Topology Time Units of Measure Generalized values  GML geometries:\n Point LineString Polygon Newer versions of GML have the ability to represent coverages/raster  \u0026lt;gml:Polygon\u0026gt; \u0026lt;gml:outerBoundaryIs\u0026gt; \u0026lt;gml:LinearRing\u0026gt; \u0026lt;gml:coordinates\u0026gt;0,0 100,0 100,100 0,100 0,0\u0026lt;/gml:coordinates\u0026gt; \u0026lt;/gml:LinearRing\u0026gt; \u0026lt;/gml:outerBoundaryIs\u0026gt; \u0026lt;/gml:Polygon\u0026gt; \u0026lt;gml:Point\u0026gt; \u0026lt;gml:coordinates\u0026gt;100,200\u0026lt;/gml:coordinates\u0026gt; \u0026lt;/gml:Point\u0026gt; \u0026lt;gml:LineString\u0026gt; \u0026lt;gml:coordinates\u0026gt;100,200 150,300\u0026lt;/gml:coordinates\u0026gt; \u0026lt;/gml:LineString\u0026gt; KML KML extends GML and maintains an open standard: OpenGIS KML Encoding Standard\nFour basic ways to display data:  Placemarks Polylines Polygons Overlays  Difference between polylines and polygons is the first and last point is the same for polygons.\nExamples of how KML can be used here.\nOSM XML OpenStreetMap XML is tag based, but not standardized in practice. It\u0026rsquo;s based on XML, with different tags than GML/KML.\nGeometries:\n Node Way Closed way  \u0026lt;node id=\u0026#34;60006651\u0026#34; visible=\u0026#34;true\u0026#34; version=\u0026#34;8\u0026#34; changeset=\u0026#34;14929023\u0026#34; timestamp=\u0026#34;2013-02-06T02:06:38Z\u0026#34; user=\u0026#34;andrewpmk\u0026#34; uid=\u0026#34;1679\u0026#34; lat=\u0026#34;43.6629666\u0026#34; lon=\u0026#34;-79.3974730\u0026#34;/\u0026gt; \u0026lt;way id=\u0026#34;8027962\u0026#34; visible=\u0026#34;true\u0026#34; version=\u0026#34;13\u0026#34; changeset=\u0026#34;29433309\u0026#34; timestamp=\u0026#34;2015-03-12T19:30:13Z\u0026#34; user=\u0026#34;andrewpmk\u0026#34; uid=\u0026#34;1679\u0026#34;\u0026gt; \u0026lt;nd ref=\u0026#34;60006651\u0026#34;/\u0026gt; \u0026lt;nd ref=\u0026#34;2143468180\u0026#34;/\u0026gt; \u0026lt;nd ref=\u0026#34;60006652\u0026#34;/\u0026gt; \u0026lt;nd ref=\u0026#34;60006653\u0026#34;/\u0026gt; \u0026lt;nd ref=\u0026#34;60006655\u0026#34;/\u0026gt; \u0026lt;nd ref=\u0026#34;60006647\u0026#34;/\u0026gt; \u0026lt;nd ref=\u0026#34;60006648\u0026#34;/\u0026gt; \u0026lt;nd ref=\u0026#34;60006649\u0026#34;/\u0026gt; \u0026lt;nd ref=\u0026#34;60006650\u0026#34;/\u0026gt; \u0026lt;nd ref=\u0026#34;60006651\u0026#34;/\u0026gt; \u0026lt;tag k=\u0026#34;addr:city\u0026#34; v=\u0026#34;Toronto\u0026#34;/\u0026gt; \u0026lt;tag k=\u0026#34;addr:country\u0026#34; v=\u0026#34;CA\u0026#34;/\u0026gt; \u0026lt;tag k=\u0026#34;addr:housenumber\u0026#34; v=\u0026#34;73-75\u0026#34;/\u0026gt; \u0026lt;tag k=\u0026#34;addr:province\u0026#34; v=\u0026#34;ON\u0026#34;/\u0026gt; \u0026lt;tag k=\u0026#34;addr:street\u0026#34; v=\u0026#34;St. George Street\u0026#34;/\u0026gt; \u0026lt;tag k=\u0026#34;building\u0026#34; v=\u0026#34;university\u0026#34;/\u0026gt; \u0026lt;tag k=\u0026#34;college\u0026#34; v=\u0026#34;University College\u0026#34;/\u0026gt; \u0026lt;tag k=\u0026#34;name\u0026#34; v=\u0026#34;Sir Daniel Wilson Residence (University College)\u0026#34;/\u0026gt; \u0026lt;tag k=\u0026#34;operator\u0026#34; v=\u0026#34;University of Toronto\u0026#34;/\u0026gt; \u0026lt;/way\u0026gt; Go to OpenStreetMap and download some data. Inspect nodes/ways/closed ways. "
},
{
	"uri": "http://mwidener.github.io/lecture5/",
	"title": "Lecture 5: Adding Data/Making Maps",
	"tags": [],
	"description": "",
	"content": "Adding Data and Making Maps In this lecture we\u0026rsquo;re going to go over how data can be added to our web maps using javascript.\n"
},
{
	"uri": "http://mwidener.github.io/lecture3/lec3_7/",
	"title": "Web Cartography/Viz: Tiles!",
	"tags": [],
	"description": "",
	"content": "Web Cartography and Visualization  Slippy Maps  They slip as a user clicks and holds, dragging the map around in the browser   Conventions  256x256 pixel PNG files Each zoom level is a directory, each column is a subdirectory, and each tile is a file (.PNG) Filename format is: /zoom/x/y.png    Different web maps have different tile conventions. At a basic level, a web map has a number of zoom levels.\nAt each zoom level there are a collection of tiles, each representing a predefined area in space.\nIf you\u0026rsquo;re zoomed out (low resolution) there are fewer tiles. If you\u0026rsquo;re zoomed in, there are more tiles.\nThe tiles are generated using the geojson data (or OSMXML etc.) we\u0026rsquo;ve been working with.\nTry out an interactive example If we\u0026rsquo;re working with image tiles we refer to them as raster tiles. If we\u0026rsquo;re working with vector (continuous) information, we use the term vector tiles. Updates to individual tiles Tiles are updated as data is tweaked. As an example, in OSM:  In the past weekly updates of tiles based on edits made to OSM  Now, more fluid updates to tiles occur http://wiki.openstreetmap.org/wiki/Slippy_Map#Mapnik_tile_rendering   http://tile.openstreetmap.org/10/286/373.png  The tile   http://tile.openstreetmap.org/10/286/373.png/status  Information on the tile, time of last render   http://tile.openstreetmap.org/10/286/373.png/dirty  Force a re-rendering of tile    "
},
{
	"uri": "http://mwidener.github.io/lecture6/",
	"title": "Filters and Mouse Events",
	"tags": [],
	"description": "",
	"content": "How do we interact with our maps? In this lecture we\u0026rsquo;re going to learn about events and filtering. These can be used select specific items in our spatial data and to trigger certain actions.\nWe\u0026rsquo;ll combine our mouse behaviour with filters in a way that influences what gets displayed.\nWhat are we covering today?  Filters Picking what shows up on the map! Basic interactivity Javascript events Mouse move Mouse click Popups Simple text * HTML in pop ups  "
},
{
	"uri": "http://mwidener.github.io/lecture3/lec3_8/",
	"title": "Vector Tiles",
	"tags": [],
	"description": "",
	"content": "What are Vector Tiles? And how do they differ from raster tiles?  Raster tiles are pixelated images of maps  http://www.openstreetmap.org/   Vector tiles are pure data  Descriptions of geometry, objects, names, etc. http://www.google.ca/maps    Same benefits as raster tiles: caching, scaling, moving map around Additionally: Styling: vectors can be styled when requested We can change the display characteristics of points, lines, polygons Not pre-rendered Size: vector tiles are really small, which makes them high resolution and fast! Only 20-50% the size of equivalent raster tiles "
},
{
	"uri": "http://mwidener.github.io/lecture7/",
	"title": "Pop-ups &amp; Visualization",
	"tags": [],
	"description": "",
	"content": "We\u0026rsquo;ve done a little exploring with mouse move and click events. In this lecture we\u0026rsquo;re going to learn about pop ups, and then we\u0026rsquo;ll move to designing choropleth maps.\nThis will build on last weeks lecture.\nRecall that mouse events allow us to interact with our web maps  \u0026lsquo;mousemove\u0026rsquo;/\u0026lsquo;mouseenter\u0026rsquo;/\u0026lsquo;mouseleave\u0026rsquo; events track where there pointer goes  if one or more conditions are met then execute some function  for example: change cursor to pointer if mouse moves over a specific layer     \u0026lsquo;mouseclick\u0026rsquo; events listen for you to click the mouse button  if a click happens, then it looks where it happened and then executes a function  for example: click on a province layer and execute a command to change the layer color      "
},
{
	"uri": "http://mwidener.github.io/lecture3/lec3_9/",
	"title": "Cartographic Considerations",
	"tags": [],
	"description": "",
	"content": "Cartographic Considerations Delivery of maps to users is rather specific  People âconsumeâ these maps via the internet Allows for some cartographic considerations to be made at a general level  However, different devices may require customization  For example, phone vs. tablet vs. laptop vs. desktop Mostly an issue for webPAGE development, not web maps  Think like a web designer  Communicating spatial information!  Need to hold the attention of your user   General guidelines:  Bigger fonts Bigger buttons Brighter colors Fewer distractions!    Colors  Light colors can be overly bright and too harsh on the eye  Can also affect clarity of boundaries   Background/foreground color combos  Need to make sure text is visible given the colors in the background. Avoid washing out text in the foreground  Visual efficiency      Fonts Web mapping process "
},
{
	"uri": "http://mwidener.github.io/lecture8/",
	"title": "Introduction to TURF",
	"tags": [],
	"description": "",
	"content": "Introduction Mapbox GL JS is plenty powerful by itself. However, it doesn\u0026rsquo;t have a lot of the classic spatial analysis tools that we\u0026rsquo;ve come to know and love (e.g. buffers).\nTURF is a library that works with geojson files. It allows you to conduct a number of spatial analysis operations in the web map environment.\nGenerally, TURF is lightweight and fast. It is composed of multiple modules that focus on specific types of operations. It also allows you to work locally with your geojson files for fast computation.\nHowever, it\u0026rsquo;s important to note:\nTURF only works with geojson and NOT vector tiles. Data for today\u0026rsquo;s class:  Canadian Airports Canadian Provinces UTM to UTSG Route  "
},
{
	"uri": "http://mwidener.github.io/lecture3/lec3_10/",
	"title": "Pre-lab work",
	"tags": [],
	"description": "",
	"content": "* Students have access to \\barchan\\vol1\\public\\winscp.exe right on their desktop * login with your utorid and password to ggr472.geog.utoronto.ca * upload files into the \u0026ldquo;public_html\u0026rdquo; directory * Visit http://ggr472.geog.utoronto.ca/~utorid/ to see your uploaded files "
},
{
	"uri": "http://mwidener.github.io/lecture9/",
	"title": "More TURF Examples",
	"tags": [],
	"description": "",
	"content": "Introduction This will be the last content for GGR 472. I\u0026rsquo;m going to show two more examples using TURF with Mapbox GL JS.\nThanks for a great class and I hope to see everyone again after the pandemic passes! Stay safe and healthy!\nREMINDER: TURF only works with geojson and NOT vector tiles. Data for today\u0026rsquo;s class:  Canadian Airports Toronto Supermarkets  "
},
{
	"uri": "http://mwidener.github.io/lecture8/lec8_4/",
	"title": "TURF Examples",
	"tags": [],
	"description": "",
	"content": "Below are a few examples using TURF! measure area of a polygon // //MEASURE AREA OF A POLYGON (only returns in square meters - must convert to other units \u0026#39;by hand\u0026#39;) var area = turf.area(canadianProvinces); console.log(\u0026#34;Canada has an area (in square meters) of: \u0026#34; + area); iterate through provinces //ITERATE THROUGH ALL PROVINCES AND REPORT THEIR AREAS canadianProvinces.features.forEach(function(feature,i,provinces){ console.log(feature.properties.PRVNAME + \u0026#34; has an area (in square meters) of: \u0026#34; + turf.area(feature)); }); measure distance between 2 points //MEASURE DISTANCE BETWEEN 2 POINTS var points = { \u0026#34;type\u0026#34;: \u0026#34;FeatureCollection\u0026#34;, \u0026#34;features\u0026#34;: [canadianAirports.features[20], canadianAirports.features[832]] }; var distance_bw_points = turf.distance(points.features[0],points.features[1],{units:\u0026#39;kilometers\u0026#39;}); console.log(distance_bw_points); create a bounding box //CREATE A BOUNDING BOX AROUND POINTS (ALSO USE FOR HEX GRID) var enveloped = turf.envelope(canadianAirports); //send point geojson to turf, creates an \u0026#39;envelope\u0026#39; (bounding box) around points var result = { //put the resulting envelope in a geojson format FeatureCollection  \u0026#34;type\u0026#34;: \u0026#34;FeatureCollection\u0026#34;, \u0026#34;features\u0026#34;: [enveloped] //don\u0026#39;t forget brackets }; create a hex grid //CREATE A HEX GRID //must be in order: minX, minY, maxX, maxY ... you have to pick these out from your envelope that you created previously var bbox = [enveloped.geometry.coordinates[0][0][0],enveloped.geometry.coordinates[0][0][1],enveloped.geometry.coordinates[0][2][0],enveloped.geometry.coordinates[0][2][1]]; var hexgridUnits = \u0026#39;kilometers\u0026#39; //units that will determine the width of the hex grid var cellSide = 30 //in the units you defined above  var hexgrid = turf.hexGrid(bbox,cellSide,{units: hexgridUnits}); //makes the new geojson hexgrid features  var tempcoord var tempfeature var coordinate_array = [] canadianProvinces.features.forEach(function(feature,i){ tempfeature = turf.centroid(feature) tempcoord = tempfeature.geometry.coordinates; coordinate_array[i] = [tempcoord,feature.properties.PRVNAME]; console.log(\u0026#34;~~~~~~~~~~~~~~~\u0026#34;) console.log(coordinate_array); feature.properties.NEWVAR = \u0026#39;blah \u0026#39; + i; }); Complete code: html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=utf-8 /\u0026gt; \u0026lt;title\u0026gt;TURF Examples\u0026lt;/title\u0026gt; \u0026lt;meta name=\u0026#39;viewport\u0026#39; content=\u0026#39;initial-scale=1,maximum-scale=1,user-scalable=no\u0026#39; /\u0026gt; \u0026lt;script src=\u0026#39;https://api.mapbox.com/mapbox-gl-js/v0.44.1/mapbox-gl.js\u0026#39;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;link href=\u0026#39;https://api.mapbox.com/mapbox-gl-js/v0.44.1/mapbox-gl.css\u0026#39; rel=\u0026#39;stylesheet\u0026#39; /\u0026gt; \u0026lt;script src=\u0026#39;https://npmcdn.com/@turf/turf/turf.min.js\u0026#39;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; body { margin:0; padding:0; } #map { position:absolute; top:0; bottom:0; width:100%; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#39;map\u0026#39; class=\u0026#39;map\u0026#39;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!--Insert your geojson files here--\u0026gt; \u0026lt;script src=\u0026#39;https://mwidener.github.io/lecture8/utmToUTSG.geojson\u0026#39;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#39;https://mwidener.github.io/lecture8/canadianAirports.geojson\u0026#39;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#39;https://mwidener.github.io/lecture8/canadianProvinces.geojson\u0026#39;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#39;./turfExamples1.js\u0026#39;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; mapboxgl.accessToken = \u0026#39;pk.eyJ1IjoibXdpZGVuZXIiLCJhIjoibXBKQU85dyJ9.Q6yf1zk7wpnYqpsQfRwVmw\u0026#39;; var map = new mapboxgl.Map({ container: \u0026#39;map\u0026#39;, style: \u0026#39;mapbox://styles/mwidener/cjcotwplq3loj2ss0pjqmmigh\u0026#39;, center: [-90, 50], zoom: 2 }); // //MEASURE AREA OF A POLYGON (only returns in square meters - must convert to other units \u0026#39;by hand\u0026#39;) var area = turf.area(canadianProvinces); console.log(\u0026#34;Canada has an area (in square meters) of: \u0026#34; + area); // //ITERATE THROUGH ALL PROVINCES AND REPORT THEIR AREAS canadianProvinces.features.forEach(function(feature,i,provinces){ console.log(feature.properties.PRVNAME + \u0026#34; has an area (in square meters) of: \u0026#34; + turf.area(feature)); }); // //MEASURE A LINESTRING var linelength = turf.length(utmToUTSG.features[0],{units:\u0026#39;kilometers\u0026#39;}); //pick out the line feature you want to measure, and don\u0026#39;t forget your units console.log(linelength); //you can use this value for future calculations, or add this data to a pop up  //MEASURE DISTANCE BETWEEN 2 POINTS var points = { \u0026#34;type\u0026#34;: \u0026#34;FeatureCollection\u0026#34;, \u0026#34;features\u0026#34;: [canadianAirports.features[20], canadianAirports.features[832]] }; var distance_bw_points = turf.distance(points.features[0],points.features[1],{units:\u0026#39;kilometers\u0026#39;}); console.log(distance_bw_points); //CREATE A BOUNDING BOX AROUND POINTS (ALSO USE FOR HEX GRID) var enveloped = turf.envelope(canadianAirports); //send point geojson to turf, creates an \u0026#39;envelope\u0026#39; (bounding box) around points var result = { //put the resulting envelope in a geojson format FeatureCollection  \u0026#34;type\u0026#34;: \u0026#34;FeatureCollection\u0026#34;, \u0026#34;features\u0026#34;: [enveloped] //don\u0026#39;t forget brackets }; //CREATE A HEX GRID  //must be in order: minX, minY, maxX, maxY ... you have to pick these out from your envelope that you created previously var bbox = [enveloped.geometry.coordinates[0][0][0],enveloped.geometry.coordinates[0][0][1],enveloped.geometry.coordinates[0][2][0],enveloped.geometry.coordinates[0][2][1]]; var hexgridUnits = \u0026#39;kilometers\u0026#39; //units that will determine the width of the hex grid var cellSide = 30 //in the units you defined above  var hexgrid = turf.hexGrid(bbox,cellSide,{units: hexgridUnits}); //makes the new geojson hexgrid features  var tempcoord var tempfeature var coordinate_array = [] canadianProvinces.features.forEach(function(feature,i){ tempfeature = turf.centroid(feature) tempcoord = tempfeature.geometry.coordinates; coordinate_array[i] = [tempcoord,feature.properties.PRVNAME]; console.log(\u0026#34;~~~~~~~~~~~~~~~\u0026#34;) console.log(coordinate_array); feature.properties.NEWVAR = \u0026#39;blah \u0026#39; + i; }); map.on(\u0026#39;style.load\u0026#39;, function(){ //use this code to add geojson source if you\u0026#39;re on a server:  // map.addSource(\u0026#39;airports\u0026#39;,{  // \u0026#34;type\u0026#34;: \u0026#34;geojson\u0026#34;,  // \u0026#34;data\u0026#34;: \u0026#34;./canadianAirports.geojson\u0026#34;  // });  //use this code to add geojson source if you\u0026#39;re working locally...be sure //to also change the geojson file so it has a \u0026#39;var\u0026#39; and add the file as a \u0026lt;script\u0026gt; //in the html file  map.addSource(\u0026#39;airports\u0026#39;,{ \u0026#34;type\u0026#34;: \u0026#34;geojson\u0026#34;, \u0026#34;data\u0026#34;: canadianAirports }); map.addLayer({ \u0026#34;id\u0026#34;: \u0026#34;airportsLayer\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;circle\u0026#34;, \u0026#34;source\u0026#34;: \u0026#34;airports\u0026#34;, \u0026#34;layout\u0026#34;: {}, \u0026#34;paint\u0026#34;:{ \u0026#39;circle-color\u0026#39;: \u0026#34;blue\u0026#34;, \u0026#39;circle-radius\u0026#39;: 2, \u0026#39;circle-opacity\u0026#39;: 1 } }); map.addSource(\u0026#39;provinces\u0026#39;,{ \u0026#34;type\u0026#34;: \u0026#34;geojson\u0026#34;, \u0026#34;data\u0026#34;: canadianProvinces }) map.addLayer({ \u0026#34;id\u0026#34;: \u0026#34;provincesLayer\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;fill\u0026#34;, \u0026#34;source\u0026#34;: \u0026#34;provinces\u0026#34;, \u0026#34;layout\u0026#34;: {}, \u0026#34;paint\u0026#34;:{ \u0026#39;fill-color\u0026#39;: \u0026#34;blue\u0026#34;, \u0026#39;fill-opacity\u0026#39;: 0.5, \u0026#39;fill-outline-color\u0026#39;: \u0026#34;black\u0026#34; } },\u0026#34;airportsLayer\u0026#34;); map.addSource(\u0026#39;utmToUTSG\u0026#39;,{ \u0026#34;type\u0026#34;: \u0026#34;geojson\u0026#34;, \u0026#34;data\u0026#34;: utmToUTSG }) map.addLayer({ \u0026#34;id\u0026#34;: \u0026#34;utPath\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;line\u0026#34;, \u0026#34;source\u0026#34;: \u0026#34;utmToUTSG\u0026#34;, \u0026#34;layout\u0026#34;: {}, \u0026#34;paint\u0026#34;:{ \u0026#39;line-color\u0026#39;: \u0026#34;red\u0026#34;, } },\u0026#34;airportsLayer\u0026#34;); //MEASURE DISTANCE BETWEEN TWO POINTS EXAMPLE  map.addSource(\u0026#39;pointsDist\u0026#39;,{ \u0026#34;type\u0026#34;: \u0026#34;geojson\u0026#34;, \u0026#34;data\u0026#34;: points }) map.addLayer({ \u0026#34;id\u0026#34;: \u0026#34;twoAirports\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;circle\u0026#34;, \u0026#34;source\u0026#34;: \u0026#34;pointsDist\u0026#34;, \u0026#34;layout\u0026#34;: {}, \u0026#34;paint\u0026#34;:{ \u0026#39;circle-color\u0026#39;: \u0026#34;red\u0026#34;, \u0026#39;circle-radius\u0026#39;: 10, \u0026#39;circle-opacity\u0026#39;: 1 }, }); //BOUNDING BOX EXAMPLE  map.addSource(\u0026#39;envelopeGeoJSON\u0026#39;,{ \u0026#34;type\u0026#34;: \u0026#34;geojson\u0026#34;, \u0026#34;data\u0026#34;: result //this is the bounding box we just created!  }) map.addLayer({ \u0026#34;id\u0026#34;: \u0026#34;airportEnvelope\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;fill\u0026#34;, \u0026#34;source\u0026#34;: \u0026#34;envelopeGeoJSON\u0026#34;, \u0026#34;layout\u0026#34;: {}, \u0026#34;paint\u0026#34;:{ \u0026#39;fill-color\u0026#39;: \u0026#34;red\u0026#34;, \u0026#39;fill-opacity\u0026#39;: 0.5, \u0026#39;fill-outline-color\u0026#39;: \u0026#34;black\u0026#34; } },\u0026#34;airportsLayer\u0026#34;); // //HEXGRID EXAMPLE  map.addSource(\u0026#39;canadaHexGrid\u0026#39;,{ \u0026#34;type\u0026#34;: \u0026#34;geojson\u0026#34;, \u0026#34;data\u0026#34;: hexgrid //this is the hexgrid we just created!  }) map.addLayer({ \u0026#34;id\u0026#34;: \u0026#34;canadaHexGrid\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;fill\u0026#34;, \u0026#34;source\u0026#34;: \u0026#34;canadaHexGrid\u0026#34;, \u0026#34;layout\u0026#34;: {}, \u0026#34;paint\u0026#34;:{ \u0026#39;fill-color\u0026#39;: \u0026#34;green\u0026#34;, \u0026#39;fill-opacity\u0026#39;: .11, \u0026#39;fill-outline-color\u0026#39;: \u0026#34;white\u0026#34; } },\u0026#39;airportsLayer\u0026#39;); // }); "
},
{
	"uri": "http://mwidener.github.io/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://mwidener.github.io/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]