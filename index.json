[
{
	"uri": "http://mwidener.github.io/lecture6/lec6_1/",
	"title": "Filters",
	"tags": [],
	"description": "",
	"content": " When we add a layer to the map using the map.addLayer method, we have the ability to filter which parts of the spatial data are shown.\nWe\u0026rsquo;ll be using older filter expressions: https://docs.mapbox.com/mapbox-gl-js/style-spec/other/#other-filter\nBut Mapbox has recently rolled out \u0026ldquo;new\u0026rdquo; expressions \u0026hellip; probably best to learn these - but I didn\u0026rsquo;t have time before lecture!: https://docs.mapbox.com/mapbox-gl-js/style-spec/expressions/\nFor vector tiles:\n‘filter’: [\u0026lt;LOGIC\u0026gt;,\u0026lt;ATTRIBUTENAME\u0026gt;, \u0026lt;value\u0026gt;]   Logic: ‘==’, ‘!=‘, ‘\u0026gt;’, ‘\u0026lt;’, ‘≥’, etc. Attribute name: the name of an attribute your file has – check studio Value: can be a string, numeric, boolean  For example:\n‘filter’: [“\u0026gt;”, “income”, 100000]  Translates to:\nincome \u0026gt; 100000\nWhat if we want two conditions  spatial objects with a property \u0026gt; x but \u0026lt; y Use the combining filter method:\n[ \u0026quot;all\u0026quot;, [\u0026quot;\u0026gt;\u0026quot;, \u0026lt;ATTRIBUTE\u0026gt;, \u0026lt;LESSER_VALUE\u0026gt;], [\u0026quot;\u0026lt;=\u0026quot;, \u0026lt;ATTRIBUTE\u0026gt;, \u0026lt;GREATER_VALUE\u0026gt;] ] [ \u0026quot;all\u0026quot;, [\u0026quot;\u0026gt;\u0026quot;, ‘population’, 100000], [\u0026quot;\u0026lt;=\u0026quot;, ‘population’, 2000000] ]   How do we combine different types of logic? Combining Filters\n[\u0026quot;all\u0026quot;, f0, ..., fn] logical AND: f0 ∧ ... ∧ fn [\u0026quot;any\u0026quot;, f0, ..., fn] logical OR: f0 ∨ ... ∨ fn [\u0026quot;none\u0026quot;, f0, ..., fn] logical NOR: ¬f0 ∧ ... ∧ ¬fn  Where f0 is a filter that looks like:\n[logic, attribute, value]  "
},
{
	"uri": "http://mwidener.github.io/lecture5/lec5_1/",
	"title": "Adding Data",
	"tags": [],
	"description": "",
	"content": " It\u0026rsquo;s easy to add data from a range of sources to your mapbox map.  Vector (from your data page on mapbox) Raster (from your data page on mapbox) GeoJSON from your server/another website Images/Videos  Must use asynchronous call. This is a way to keep code from running until some event occurs. map.on('load', function(){ // DO STUFF HERE });  In the \u0026lsquo;DO STUFF HERE\u0026rsquo; area we want to do two things.\n1) Add the data source - where are we pulling data from to put in our site? 2) Draw the data.\nHow do we do this? Let\u0026rsquo;s look at the API to see what the addSource() and addLayer() methods do!\nhttps://www.mapbox.com/mapbox-gl-js/api/\n"
},
{
	"uri": "http://mwidener.github.io/lecture4/lec4_1/",
	"title": "MapBox Studio",
	"tags": [],
	"description": "",
	"content": " MapBox Studio is your home base. https://studio.mapbox.com From here you can manually create maps and tweak their designs.\n We can upload data\n \u0026hellip;and it\u0026rsquo;ll be transformed from its native format into vector tiles. This happens in the \u0026ldquo;Datasets\u0026rdquo; section  We can also modify maps\n \u0026hellip;so that they\u0026rsquo;re designed how we want. Take data they\u0026rsquo;ve precompiled and style them to our choosing. This happens in the \u0026ldquo;Styles\u0026rdquo; section.   "
},
{
	"uri": "http://mwidener.github.io/lecture3/lec3_1/",
	"title": "GeoJSON components",
	"tags": [],
	"description": "",
	"content": "  A Feature type is a spatial object  Has geometry and properties It is possible to have multiple geometries, but this is very rare  A FeatureCollection type\n Object that has feature objects\n{ \u0026quot;type\u0026quot;: \u0026quot;FeatureCollection\u0026quot;, \u0026quot;features\u0026quot;: [ { \u0026quot;type\u0026quot;: \u0026quot;Feature\u0026quot;, \u0026quot;geometry\u0026quot;: {\u0026quot;type\u0026quot;: \u0026quot;Point\u0026quot;, \u0026quot;coordinates\u0026quot;: [102.0, 0.5]}, \u0026quot;properties\u0026quot;: {\u0026quot;prop0\u0026quot;: \u0026quot;value0\u0026quot;} }, { \u0026quot;type\u0026quot;: \u0026quot;Feature\u0026quot;, \u0026quot;geometry\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;LineString\u0026quot;, \u0026quot;coordinates\u0026quot;: [ [102.0, 0.0], [103.0, 1.0], [104.0, 0.0], [105.0, 1.0] ] }, \u0026quot;properties\u0026quot;: { \u0026quot;prop0\u0026quot;: \u0026quot;value0\u0026quot;, \u0026quot;prop1\u0026quot;: 0.0 } }, { \u0026quot;type\u0026quot;: \u0026quot;Feature\u0026quot;, \u0026quot;geometry\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;Polygon\u0026quot;, \u0026quot;coordinates\u0026quot;: [ [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0] ] ] }, \u0026quot;properties\u0026quot;: { \u0026quot;prop0\u0026quot;: \u0026quot;value0\u0026quot;, \u0026quot;prop1\u0026quot;: {\u0026quot;this\u0026quot;: \u0026quot;that\u0026quot;} } } ] }    From geojson.org:  2.2. Feature Objects  A GeoJSON object with the type \u0026ldquo;Feature\u0026rdquo; is a feature object. A feature object must have a member with the name \u0026ldquo;geometry\u0026rdquo;. The value of the geometry member is a geometry object as defined above or a JSON null value. A feature object must have a member with the name \u0026ldquo;properties\u0026rdquo;. The value of the properties member is an object (any JSON object or a JSON null value). If a feature has a commonly used identifier, that identifier should be included as a member of the feature object with the name \u0026ldquo;id\u0026rdquo;.  2.3. Feature Collection Objects  A GeoJSON object with the type \u0026ldquo;FeatureCollection\u0026rdquo; is a feature collection object. An object of type \u0026ldquo;FeatureCollection\u0026rdquo; must have a member with the name \u0026ldquo;features\u0026rdquo;. The value corresponding to \u0026ldquo;features\u0026rdquo; is an array. Each element in the array is a feature object as defined above.   "
},
{
	"uri": "http://mwidener.github.io/lecture1/lec1_1/",
	"title": "Review of Course Structure",
	"tags": [],
	"description": "",
	"content": " For ‘letter marked’ assignments, I will use the Faculty of Arts and Sciences marking criteria.\nSee syllabus for course policies on accessibility, accommodation, academic integrity and late assignments.\nThis course will have a lot of new material for most people, so as a general rule, it\u0026rsquo;s best to keep an open line of communication with me!\nMaterials  Text editor  This is where you will write down and edit your code. A good editor is key! I recommend Atom or Sublime  Mapbox Account  www.mapbox.com  Lynda Access  access via this link to lynda at uoft  google or yahoo or bing or alta vista or whatever\u0026hellip;  "
},
{
	"uri": "http://mwidener.github.io/lecture2/lec2_1/",
	"title": "Strengths/Weaknesses of Web Maps",
	"tags": [],
	"description": "",
	"content": " Strengths of Web Maps Easy to:  keep up to date distribute personalize collaborate\nCheap diverse array of open source software\n  Different types of data Integration with other types of info online Weaknesses of Web Maps Steep learning curve for advanced work Not necessarily best platform for complex computation Different platform types means many things to learn Having info online means security/maintenance concerns that differ from conventional GIS "
},
{
	"uri": "http://mwidener.github.io/",
	"title": "Home",
	"tags": [],
	"description": "",
	"content": " Welcome to Developing Web Maps! Welcome to GGR 472: Developing Web Maps - Winter 2020. In this class we will explore how web maps are designed and created, using the MapBox GL JS API.\nCourse Overview Typically this course will consist of about one hour of lecture and then about an hour of hands-on development. Over the course of the term, we'll explore:   what web maps are good for, and what they\u0026rsquo;re less good for, what kinds of spatial data they use, how design considerations change for viewing spatial data online numerous interactive features, and how to do basic GIS online.\n  A note on coding: Given that we'll be using JavaScript, HTML, and CSS in this class, it is strongly recommended that students either have some previous experience with programming or commit to doing a little extra skills development outside of class. Part of the first week of class and the first assignment are dedicated to learning these languages, but you will likely need to keep up the training as we continue through the term. Like anything, you'll get better with these languages with practice! Don\u0026rsquo;t be this guy: "
},
{
	"uri": "http://mwidener.github.io/lecture6/lec6_2/",
	"title": "Events",
	"tags": [],
	"description": "",
	"content": " Let\u0026rsquo;s start with mouse events  The mouse is the primary mode of interaction with the computer  Essential for navigating webpages, web maps, web apps, etc.  Modern browsers pay close attention to what the mouse is doing  Hover, clicks  Take advantage of this to add interface   Events are things that happen to elements in the webpage\n Can be something done by the browser or user JS can react to events and implement code  We’ve been doing this already with:\nmap.on('load', function(){ stuff; });  Essentially the code is listening for events to happen\n knows what to implement when that event happens   We can look at all of the event types here: https://docs.mapbox.com/mapbox-gl-js/api/#events\nAnd the specific events under map in the API here: https://docs.mapbox.com/mapbox-gl-js/api/#map\n"
},
{
	"uri": "http://mwidener.github.io/lecture5/lec5_2/",
	"title": "Adding GeoJSON data",
	"tags": [],
	"description": "",
	"content": "To add GeoJSON data we would use the following code, if we want to manually add GeoJSON code:\nmap.addSource('my-data', { \u0026quot;type\u0026quot;: \u0026quot;geojson\u0026quot;, \u0026quot;data\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;Feature\u0026quot;, \u0026quot;geometry\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;Point\u0026quot;, \u0026quot;coordinates\u0026quot;: [-77.0323, 38.9131] }, \u0026quot;properties\u0026quot;: { \u0026quot;title\u0026quot;: \u0026quot;Mapbox DC\u0026quot;, \u0026quot;marker-symbol\u0026quot;: \u0026quot;monument\u0026quot; } } });  OR we can point to a .geojson file:\nmap.addSource('my-data', { \u0026quot;type\u0026quot;: \u0026quot;geojson\u0026quot;, \u0026quot;data\u0026quot;: \u0026quot;./mygeojsonfile.geojson\u0026quot; });  In both examples above, the \u0026ldquo;my-data\u0026rdquo; label is what we call the \u0026ldquo;source ID\u0026rdquo;. This is how we will access/refer these data inside the rest of our javascript code.\nHow are our files organized on our server?\n"
},
{
	"uri": "http://mwidener.github.io/lecture4/lec4_2/",
	"title": "Data/Styles in MapBox",
	"tags": [],
	"description": "",
	"content": " Data in Mapbox  When we go to Data we can upload our own spatial files  MBTiles, KML, GPX, GeoJSON, Shapefile (zipped), CSV, GeoTIFF  If the file is vector data it will convert to a vector tile  PBF (mapbox vector tile format – “Protocolbuffer Binary Format”)  If the file is raster data it will convert to a raster tile  PNGs   EXAMPLE – Toronto Area Food Retailers (Points, geojson)\nEXAMPLE – US States (Polygons, geojson)\nStyling the Data  We can access the data we uploaded in the style section  Edit colors, other traits  Limits to this method\n Need javascript to do more complicated styling  We can also download the whole thing as a json file\n Mapbox GL style spec https://www.mapbox.com/mapbox-gl-style-spec/ Open up example to see what else you can edit   EXERCISE  Add Toronto CMA, Toronto DAs, and Toronto Supermarkets as new tilesets  Create a new style  Add the three data layers  Make CMA visible at low zoom levels (higher altitude) Make DAs visible at medium zoom levels Add supermarkets, and stylize  Publish your map  "
},
{
	"uri": "http://mwidener.github.io/lecture3/lec3_2/",
	"title": "GeoJSON geometries",
	"tags": [],
	"description": "",
	"content": " Geometries in geojson are similar to the other online formats we\u0026rsquo;ve explored.  Point = Point Line/polyline = LineString Polygon = Polygon  { \u0026quot;type\u0026quot;: \u0026quot;Point\u0026quot;, \u0026quot;coordinates\u0026quot;: [30,10] }  { \u0026quot;type\u0026quot;: \u0026quot;LineString\u0026quot;, \u0026quot;coordinates\u0026quot;: [ [30,10], [10,30],[40,40] ] }  { \u0026quot;type\u0026quot;: \u0026quot;Polygon\u0026quot;, \u0026quot;coordinates\u0026quot;: [ [30,10], [40,40], [20,40], [10,20],[30,10] ] }  { \u0026quot;type\u0026quot;: \u0026quot;Polygon\u0026quot;, \u0026quot;coordinates\u0026quot;: [ [[35,10], [45,45], [15,40], [10,20],[35,10]], [[20,30], [35,35], [30,20], [20,30]] ] }  "
},
{
	"uri": "http://mwidener.github.io/lecture1/lec1_2/",
	"title": "Programming",
	"tags": [],
	"description": "",
	"content": " Programming is important! We\u0026rsquo;ll be using three languages: * JavaScript * HTML * CSS\nWhy do we need to program?  You can handle bigger projects and more data through automation and logic. This is the standard way that serious web mapping and web GIS is done. It looks great on your resume!  HTML  HyperText Markup Language  Files sent from servers to personal computers They tell the computer things like what to display or where to get data  HTML elements tell us things about where text should go, how it should be displayed, if an image should be centered  We express HTML elements through HTML tags \u0026lt;html\u0026gt; ... \u0026lt;/html\u0026gt;  http://html.com/document/  CSS  Cascading Style Sheet  “Style sheet” code used to style the content of a web page. Interacts with HTML and describes how things should be sized, coloured, etc. Can be more complicated  Helps separate the website content from website styling  Reduces repetition if you have multiple HTML docs  http://www.w3schools.com/css/default.asp  JavaScript  The de facto lingua franca of the world wide web Controls the behaviour of a webpage  HTML and CSS just describe  Javascript is a programming language  Conditional statements Logic Looping Data manipulation/handling   "
},
{
	"uri": "http://mwidener.github.io/lecture2/lec2_2/",
	"title": "Classification of Web Maps",
	"tags": [],
	"description": "",
	"content": " Classifying Web Maps A 2001 paper by Jan Kraak attempted to classify web maps  Web Maps  static maps view only interactive interface/contents dynamic maps view only interactive interface/contents   Other ways to think about web maps  Analytical web maps  Basically GIS online  Animated/Realtime web maps  Constantly updated maps showing changes in spatial locations  Collaborative web maps  Teams contribute to a single spatial representation online  Online atlases  Static collections of production quality maps that were formerly printed as books, can be interactive  Static web maps  Pages with maps that have no interactivity   "
},
{
	"uri": "http://mwidener.github.io/introduction/",
	"title": "Course Information",
	"tags": [],
	"description": "",
	"content": " This section has information about the course structure and where you can go to get help. "
},
{
	"uri": "http://mwidener.github.io/lecture6/lec6_3/",
	"title": "Mouse Move Event Example",
	"tags": [],
	"description": "",
	"content": " Let\u0026rsquo;s try this out with a mousemove event.  We can use the mousemove event to highlight a spatial object when our mouse is hovering over it. What we need:  Standard HTML file Javascript file with standard map object code Standard add source code Standard add layer code  Things that are a bit different:\n We need a second add layer code section We will use the filter option to initially display NO spatial objects from the layer As the mouse moves, we will change the filter so that it triggers the display of spatial objects over which the mouse hovers\nmapboxgl.accessToken = '\u0026lt;your access Token\u0026gt;'; var map = new mapboxgl.Map({ container: 'map', //container id in HTML style: 'mapbox://styles/mwidener/cjcouhmq03m9t2rmvgnmmsr1l', //stylesheet location center: [-102.542951,59.650162], // starting point, longitude/latitude zoom: 2.5 // starting zoom level }); //SIMPLY ADDING A POLYGON OF PROVINCES FROM MAPBOX VECTOR TILES map.on('style.load', function(){ map.addSource('provinces',{ 'type': 'vector', 'url': 'mapbox://mwidener.6sokce8y' }); map.addLayer({ 'id': 'provinces-fill', 'type': 'fill', 'source': 'provinces', 'layout': {}, 'paint': { 'fill-color': 'red', 'fill-opacity': 1, 'fill-outline-color': 'white' }, 'source-layer': \u0026quot;CanadianProvinces-5onu90\u0026quot; }); //Add another visualization of the polygon of provinces. Note we do not add the source again! map.addLayer({ 'id': 'provinces-hl', //remember to change the name - this is our \u0026quot;highlight\u0026quot; layer (hence '-hl') 'type': 'fill', 'source': 'provinces', 'layout': {}, 'paint': { 'fill-color': 'grey', 'fill-opacity': 1, 'fill-outline-color': 'black' }, 'source-layer': \u0026quot;CanadianProvinces-5onu90\u0026quot;, 'filter': [\u0026quot;==\u0026quot;,\u0026quot;PRID\u0026quot;,\u0026quot;\u0026quot;] //Here is a filter that doesn't select anything }); map.addLayer({ 'id': 'provinces-hl-lowpop', //remember to change the name - this is our \u0026quot;highlight\u0026quot; layer (hence '-hl') 'type': 'fill', 'source': 'provinces', 'layout': {}, 'paint': { 'fill-color': 'green', 'fill-opacity': 1, 'fill-outline-color': 'white' }, 'source-layer': \u0026quot;CanadianProvinces-5onu90\u0026quot;, 'filter': [\u0026quot;==\u0026quot;,\u0026quot;PRID\u0026quot;,\u0026quot;\u0026quot;] //Here is a filter that doesn't select anything }); map.addLayer({ 'id': 'provinces-hl-highpop', //remember to change the name - this is our \u0026quot;highlight\u0026quot; layer (hence '-hl') 'type': 'fill', 'source': 'provinces', 'layout': {}, 'paint': { 'fill-color': 'blue', 'fill-opacity': 1, 'fill-outline-color': 'white' }, 'source-layer': \u0026quot;CanadianProvinces-5onu90\u0026quot;, 'filter': [\u0026quot;==\u0026quot;,\u0026quot;PRID\u0026quot;,\u0026quot;\u0026quot;] //Here is a filter that doesn't select anything }); }) //********************************* //HOVER EVENTS 1 //********************************* map.on('mousemove', 'provinces-fill', function(e) { var features = e.features; //e is passed to the function - 'e' is the event info triggered if(features.length \u0026gt; 0){ //if there are features in the e.features array then go into the conditional var feature = e.features[0]; //pull out the first feature element in the features array console.log(feature.properties) //print out the feature properties in the browser console if(feature.properties.POP \u0026gt; 1000000){ //if the POP attribute of the features is \u0026gt; 1 mill, make it blue map.setPaintProperty(\u0026quot;provinces-hl\u0026quot;,\u0026quot;fill-color\u0026quot;,\u0026quot;blue\u0026quot;); console.log('pop is: ' + feature.properties.POP); //print pop value in console } else{ map.setPaintProperty(\u0026quot;provinces-hl\u0026quot;,\u0026quot;fill-color\u0026quot;,\u0026quot;green\u0026quot;); //if POP is less than 1 mill, make it green console.log('pop is: ' + feature.properties.POP); //print pop value in console } map.setFilter(\u0026quot;provinces-hl\u0026quot;,[\u0026quot;==\u0026quot;, \u0026quot;PRID\u0026quot;, feature.properties.PRID]); //set the filter of the provinces-hl to display //the feature you're hovering over } }); map.on('mouseenter','provinces-fill',function(e){ //when your mouse enters the provinces-fill layer map.getCanvas().style.cursor = 'pointer'; //change the mouse cursor to a pointer }); map.on('mouseleave','provinces-fill',function(e){ map.getCanvas().style.cursor = ''; // when the mouse leaves the provinces fill layer map.setFilter(\u0026quot;provinces-hl\u0026quot;,[\u0026quot;==\u0026quot;, \u0026quot;PRID\u0026quot;,\u0026quot;\u0026quot;]); //change back to normal cursor, also remove filters to make //provinces-hl layer invisible }); //********************************* //HOVER EVENTS 1 //********************************* //********************************* //HOVER EVENTS VERSION 2 //********************************* /*map.on('mousemove', function(e){ var features = map.queryRenderedFeatures(e.point, { \u0026quot;layers\u0026quot;: [\u0026quot;provinces-fill\u0026quot;]} ); if(features.length \u0026gt; 0){ var feature = features[0]; console.log(feature.properties) if(feature.properties.POP \u0026gt; 1000000){ map.setPaintProperty(\u0026quot;provinces-hl\u0026quot;,\u0026quot;fill-color\u0026quot;,\u0026quot;blue\u0026quot;); console.log('pop is: ' + feature.properties.POP); } else{ map.setPaintProperty(\u0026quot;provinces-hl\u0026quot;,\u0026quot;fill-color\u0026quot;,\u0026quot;green\u0026quot;); console.log('pop is: ' + feature.properties.POP); } map.setFilter(\u0026quot;provinces-hl\u0026quot;,[\u0026quot;==\u0026quot;, \u0026quot;PRID\u0026quot;, feature.properties.PRID]); } }); map.on('mouseenter','provinces-fill',function(e){ map.getCanvas().style.cursor = 'pointer'; }); map.on('mouseleave','provinces-fill',function(e){ map.getCanvas().style.cursor = ''; }); */ //********************************* //HOVER EVENTS VERSION 2 //*********************************    "
},
{
	"uri": "http://mwidener.github.io/lecture5/lec5_3/",
	"title": "Adding Vector Data",
	"tags": [],
	"description": "",
	"content": "If we want to add data from the Dataset section of our mapbox portal, we can make a direct reference to those data using the addSource() method.\nmap.addSource('my_data',{ \u0026quot;type\u0026quot;: \u0026quot;vector\u0026quot;, \u0026quot;url\u0026quot;: \u0026quot;mapbox://mwidener.3259jdk2\u0026quot; //link to data from mapbox site })  "
},
{
	"uri": "http://mwidener.github.io/lecture4/lec4_3/",
	"title": "JS, MapBox, &amp; Maps",
	"tags": [],
	"description": "",
	"content": " Recap  We’ve learned about  The history of web maps Common data structures Raster and vector tiles How to upload data \u0026amp; create tiles in Mapbox How to stylize tiles in Mapbox   We could make our maps manually, but\u0026hellip;  Time consuming Hard to automatically updates Limited features available to us  A programming interface will allow for faster updates and more advanced features.  We can also customize our projects way more than we could manually We can also integrate interaction, loops, conditionals, etc.  We\u0026rsquo;ll use JavaScript.  Supported by all modern web browsers Object oriented Lots of great APIs  Application programming interface  APIs  Essentially a tool box that you access through computer code Pre-written methods/functions that you can call that complete common tasks   "
},
{
	"uri": "http://mwidener.github.io/lecture3/lec3_3/",
	"title": "GeoJSON polygons",
	"tags": [],
	"description": "",
	"content": " Polygons can be quite complicated. GeoJSON allows for an easy way to describe polygons with (multiple) interior gaps.  Polgyon  LinearRing (exterior)  Positions  LinearRing (interior)  Positions  LinearRing (interior)  Positions    Only 1 exterior ring and then as many interior rings as needed { \u0026quot;type\u0026quot;: \u0026quot;Polygon\u0026quot;, \u0026quot;coordinates\u0026quot;: [ [[35,10], [45,45], [15,40], [10,20],[35,10]], [[20,30], [35,35], [30,20], [20,30]] ] }  Care also should be taken with coordinate ordering in GeoJSON Polygons The exterior ring should be counterclockwise Interior rings should be clockwise Why does this matter? The classic Chamberlain \u0026amp; Duquette algorithm for calculating the area of a polygon on a sphere has the nice property that counterclockwise-wound polygons have positive area and clockwise yield negative. If you ensure winding order, calculating the area of a polygon with holes is as simple as adding the areas of all rings. Winding order also has a default meaning in Canvas and other drawing APIs: drawing a path with counterclockwise order within one with clockwise order will cut it out of the filled image. source: More than you ever wanted to know about geojson\n"
},
{
	"uri": "http://mwidener.github.io/lecture1/lec1_3/",
	"title": "Basic Programming Concepts",
	"tags": [],
	"description": "",
	"content": " Basic Programming Concepts Variable assignment var x = 12 var blah = \u0026quot;some text that i'm writing right now!\u0026quot; blah = x y = blah - x  Arrays var universities = [\u0026quot;UofT\u0026quot;, \u0026quot;Western\u0026quot;, \u0026quot;McMaster\u0026quot;]; universities[0] //will return \u0026quot;UofT\u0026quot;  Conditional statements if (condition) { // block of code to be executed if the condition is true }  An example from https://www.w3schools.com/js/js_if_else.asp\nif (hour \u0026lt; 18) { greeting = \u0026quot;Good day\u0026quot;; } else { greeting = \u0026quot;Good evening\u0026quot; }  What would this return now?\nLoops var i; for (i = 0; i \u0026lt; universities.length; i++) { text += universities[i] + \u0026quot;\u0026lt;br\u0026gt;\u0026quot;; } /*will print: UofT Western McMaster */  To the board! "
},
{
	"uri": "http://mwidener.github.io/lecture2/lec2_3/",
	"title": "Making Web Maps",
	"tags": [],
	"description": "",
	"content": " How do we make web maps Approach depends on factors that are similar to how you develop conventional GISystems  Audience Scope Refresh rate Collaboration strategy\nNew dimensions interactivity\n Realtime\n linkages to other online resources\n  Group exercise!  Find an online map on a website that isn’t a major web map provider (e.g. google, microsoft, etc.)  Describe the purpose of the map List any interactivity/features Does the map serve its purpose well? What additional features might be nice to have?   "
},
{
	"uri": "http://mwidener.github.io/lecture1/",
	"title": "Lecture 1: Intro",
	"tags": [],
	"description": "",
	"content": " Lecture 1 What are web maps? What is this class about?  Investigating the history of web maps Exploring a range of web mapping tools Exploring a range of development methods Group work developing your own web map  "
},
{
	"uri": "http://mwidener.github.io/lecture6/lec6_4/",
	"title": "Mouse click event example",
	"tags": [],
	"description": "",
	"content": " Let\u0026rsquo;s also try this with a mouse click event \u0026hellip; but try to figure this out on your own\u0026hellip; mapboxgl.accessToken = '\u0026lt;your access token\u0026gt;'; var map = new mapboxgl.Map({ container: 'map', //container id in HTML style: 'mapbox://styles/mwidener/cjcouhmq03m9t2rmvgnmmsr1l', //stylesheet location center: [-102.542951,59.650162], // starting point, longitude/latitude zoom: 2.5 // starting zoom level }); //SIMPLY ADDING A POLYGON OF PROVINCES FROM MAPBOX VECTOR TILES map.on('style.load', function(){ map.addSource('provinces',{ 'type': 'vector', 'url': 'mapbox://mwidener.6sokce8y' }); map.addLayer({ 'id': 'provinces-fill', 'type': 'fill', 'source': 'provinces', 'layout': {}, 'paint': { 'fill-color': 'red', 'fill-opacity': 1, 'fill-outline-color': 'white' }, 'source-layer': \u0026quot;CanadianProvinces-5onu90\u0026quot; }); //Add another visualization of the polygon of provinces. Note we do not add the source again! map.addLayer({ 'id': 'provinces-hl', //remember to change the name - this is our \u0026quot;highlight\u0026quot; layer (hence '-hl') 'type': 'fill', 'source': 'provinces', 'layout': {}, 'paint': { 'fill-color': 'grey', 'fill-opacity': 1, 'fill-outline-color': 'black' }, 'source-layer': \u0026quot;CanadianProvinces-5onu90\u0026quot;, 'filter': [\u0026quot;==\u0026quot;,\u0026quot;PRID\u0026quot;,\u0026quot;\u0026quot;] //Here is a filter that doesn't select anything }); map.addLayer({ 'id': 'provinces-hl-lowpop', //remember to change the name - this is our \u0026quot;highlight\u0026quot; layer (hence '-hl') 'type': 'fill', 'source': 'provinces', 'layout': {}, 'paint': { 'fill-color': 'green', 'fill-opacity': 1, 'fill-outline-color': 'white' }, 'source-layer': \u0026quot;CanadianProvinces-5onu90\u0026quot;, 'filter': [\u0026quot;==\u0026quot;,\u0026quot;PRID\u0026quot;,\u0026quot;\u0026quot;] //Here is a filter that doesn't select anything }); map.addLayer({ 'id': 'provinces-hl-highpop', //remember to change the name - this is our \u0026quot;highlight\u0026quot; layer (hence '-hl') 'type': 'fill', 'source': 'provinces', 'layout': {}, 'paint': { 'fill-color': 'blue', 'fill-opacity': 1, 'fill-outline-color': 'white' }, 'source-layer': \u0026quot;CanadianProvinces-5onu90\u0026quot;, 'filter': [\u0026quot;==\u0026quot;,\u0026quot;PRID\u0026quot;,\u0026quot;\u0026quot;] //Here is a filter that doesn't select anything }); }) //********************************* //CLICK EVENTS VERSION 1 //********************************* map.on('click','provinces-fill',function(e){ var features = e.features; console.log('print: ' + features) if(features.length \u0026gt; 0){ var feature = features[0]; //console.log(feature) var current_filter = map.getFilter(\u0026quot;provinces-hl\u0026quot;); if(current_filter[2] == feature.properties.PRID){ map.setFilter(\u0026quot;provinces-hl\u0026quot;,[\u0026quot;==\u0026quot;, \u0026quot;PRID\u0026quot;, \u0026quot;\u0026quot;]) } else{ map.setFilter(\u0026quot;provinces-hl\u0026quot;,[\u0026quot;==\u0026quot;, \u0026quot;PRID\u0026quot;, feature.properties.PRID]); } } }); map.on('mouseenter','provinces-fill',function(e){ map.getCanvas().style.cursor = 'pointer'; }); map.on('mouseleave','provinces-fill',function(e){ map.getCanvas().style.cursor = ''; }); //********************************* //CLICK EVENTS VERSION 1 //********************************* //********************************* //CLICK EVENTS VERSION 2 //********************************* /*map.on('click', function(e){ //var point_test = e.point //console.log('blah: ' +point_test); var features = map.queryRenderedFeatures(e.point, { //grab features from the point on which the event 'e' occurred \u0026quot;layers\u0026quot;: [\u0026quot;provinces-fill\u0026quot;]} //we're only interested in features on provinces-fill layer ); if (features.length \u0026gt; 0){ // if there are features to be clicked on (i.e. 1 or more) console.log(features[0]); // print out the feature in the console var feature = features[0]; //move the feature into a variable var current_filter = map.getFilter(\u0026quot;provinces-hl\u0026quot;); //get the current status of the provinces-hl filter if(current_filter[2] == feature.properties.PRID){ //if the filter is currently set to where we clicked map.setFilter(\u0026quot;provinces-hl\u0026quot;,[\u0026quot;==\u0026quot;, \u0026quot;PRID\u0026quot;, \u0026quot;\u0026quot;]) //then we want to remove the filter (i.e. turn off a previous click) } else{ map.setFilter(\u0026quot;provinces-hl\u0026quot;,[\u0026quot;==\u0026quot;, \u0026quot;PRID\u0026quot;, feature.properties.PRID]); //otherwise, we want to set the filter to the //feature we clicked on } } else{ map.setFilter(\u0026quot;provinces-hl\u0026quot;,[\u0026quot;==\u0026quot;, \u0026quot;PRID\u0026quot;, \u0026quot;\u0026quot;]); //if features.length == that means we clicked off our feature layer //so make hl layer invisible } }); map.on('mouseenter','provinces-fill',function(e){ map.getCanvas().style.cursor = 'pointer'; }); map.on('mouseleave','provinces-fill',function(e){ map.getCanvas().style.cursor = ''; }); */ //********************************* //CLICK EVENTS VERSION 2 //*********************************  "
},
{
	"uri": "http://mwidener.github.io/lecture5/lec5_4/",
	"title": "Adding Layers",
	"tags": [],
	"description": "",
	"content": " OK, so now we\u0026rsquo;ve added data, but the data are not yet displayed in the map. We have to tell mapbox how we want these data to be presented.\nTo do this we use the addLayer() method.\nhttps://docs.mapbox.com/mapbox-gl-js/style-spec/layers/\nFor geojson: map.addLayer({ 'id': 'a_layer_name_as_string', 'type': 'fill', //this can be fill for polygon, line for lines, or circle for points 'source': 'the_source_ID_from_addSource()', 'layout': {}, 'paint': { //a bunch of parameters that allow you to customize the display 'fill-color': '#f08', 'fill-opacity': 0.4 } });  For vector: map.addLayer({ 'id': 'a_layer_name_as_string', 'type': 'fill', //this can be fill for polygon, line for lines, or circle for points 'source': 'the_source_ID_from_addSource()', 'layout': {}, 'paint': { //a bunch of parameters that allow you to customize the display 'fill-color': '#f08', 'fill-opacity': 0.4 }, \u0026quot;source-layer\u0026quot;: \u0026quot;some_layer_label_from_mapbox_data_page\u0026quot; });  Refer to the above documentation link for which paint options you can use for different types of geometries.\n"
},
{
	"uri": "http://mwidener.github.io/lecture4/lec4_4/",
	"title": "MapBox GL JS",
	"tags": [],
	"description": "",
	"content": "  Many different APIs out there.  Leaflet Maps API Mapzen Mapbox JS Mapbox GL JS  We’re going to use Mapbox GL JS  Uses WebGL (web graphics library) 3d/2d graphics in web browsers (desktop/mobile) without plugins. GPU (graphics processing unit) driven – video game-like graphics  http://eyes.nasa.gov/curiosity/  Open source maintained by Mapbox: https://github.com/mapbox/mapbox-gl-js   One advantage of using GL/vector tiles vs. raster tiles:  Layers  Mapbox JS and Leaflet have baselayers and overlays Baselayers: image tiles that make up the basemap, lots of data but not very interactive Overlays: usually vector data like geojson, contain less data but more interactive Mapbox GL JS sends data to the client, along with certain rules saying how to visualize it – NO DISTINCTION   "
},
{
	"uri": "http://mwidener.github.io/lecture3/lec3_4/",
	"title": "Limits of GeoJSON",
	"tags": [],
	"description": "",
	"content": " The dateline! Lines and polygons are a collection of points The points shoudl be within -180 and 180 degrees longitude Does a LineString go from -179 to 179 longitude go all the way around the world or just across the dateline? Solution: use 179 to 181 \u0026hellip; it\u0026rsquo;s a hack, but it works.\n"
},
{
	"uri": "http://mwidener.github.io/lecture2/lec2_4/",
	"title": "Spatial Data",
	"tags": [],
	"description": "",
	"content": " Spatial Data Review Refresher:  Points Lines Polygons  How do we deal with these things in a computer?\nData Model  a set of constructs for describing and representing selected aspects of the real world in a computer. We need a model because the real world is infinitely complex.  Raster files: ncols 480 nrows 450 xllcorner 378923 yllcorner 4072345 cellsize 30 nodata_value -32768 43 2 45 7 3 56 2 5 23 65 34 6 32 54 57 34 2 2 54 6 ... 35 45 65 34 2 6 78 4 2 6 89 3 2 7 45 23 5 8 4 1 62 ... 43 2 45 7 3 56 2 5 23 65 34 6 32 54 57 34 2 2 54 6 ... 35 45 65 34 2 6 78 4 2 6 89 3 2 7 45 23 5 8 4 1 62 ... 43 2 45 7 3 56 2 5 23 65 34 6 32 54 57 34 2 2 54 6 ... 35 45 65 34 2 6 78 4 2 6 89 3 2 7 45 23 5 8 4 1 62 ...  Vector Data Model  More commonly associated with discrete data Concepts Three general geometric types  Point Polyline Polygon   How do these look in the computer? It depends\u0026hellip; At the most basic level: What about shapefiles? This is a lot of information and not particularly efficient. That leads us to web mapping. Are shapefiles the way to go? Well, to understand why they aren\u0026rsquo;t, it\u0026rsquo;s helpful to understand a little about the internet.\n Packet switching  Data are broken into small chunks and passed from an origin to a destination Allows for many routes to the destination computer  Servers  Electronic filing cabinets that pass information when requested  Clients  Computers that get information from servers   "
},
{
	"uri": "http://mwidener.github.io/lecture2/",
	"title": "Lecture 2: Data",
	"tags": [],
	"description": "",
	"content": " What are web maps? Web maps are just maps on the internet. They can be static or interactive \u0026hellip; but nowadays they\u0026rsquo;re mostly interactive.\nEasy way to diffuse spatial information and provide interactivity.\nWeb maps help move geographic information systems and sciences to the world wide web.\nWeb mapping consists of three major components:  geography information the Web  In this class we\u0026rsquo;re moving in a different direction than many of your previous GIS courses. How can we use the web to make mapping useful in new and different ways?\n"
},
{
	"uri": "http://mwidener.github.io/lecture5/lec5_5/",
	"title": "Bringing it all together",
	"tags": [],
	"description": "",
	"content": " Using the supermarket geojson data from last week\u0026hellip;\nexample with both vector tiles and geojson: mapboxgl.accessToken = 'pk.eyJ1IjoibXdpZGVuZXIiLCJhIjoibXBKQU85dyJ9.Q6yf1zk7wpnYqpsQfRwVmw'; var map = new mapboxgl.Map({ container: 'map', //container id in HTML style: 'mapbox://styles/mwidener/cikgx8tbm003tapm5o1zquc9m', //stylesheet location center: [-79.39, 43.72], // starting point, longitude/latitude zoom: 10 // starting zoom level }); map.on('load', function(){ //ADDING A SOURCE FROM A MAPBOX TILESET - DATA YOU UPLOADED TO MAPBOX STUDIO map.addSource('supermarket_data_vector',{ 'type': 'vector', 'url': 'mapbox://mwidener.ck629gt2v0bkm2jmqhtcc41uw-0zmtf' }); map.addLayer({ 'id':'supermarket_vector_layer', 'type': 'circle', 'source': 'supermarket_data_vector', 'layout': {}, 'paint': { 'circle-color': 'red', 'circle-radius': 10 }, 'source-layer': 'supermarkets' //get this from mapbox tileset page }); //ADDING A GEOJSON SOURCE EXAMPLE map.addSource('supermarkets_data',{ 'type': 'geojson', 'data': './supermarkets.geojson' }); map.addLayer({ 'id': 'supermarkets_layer', 'type': 'circle', 'source': 'supermarkets_data', 'layout': {}, 'paint': { 'circle-color': 'blue', 'circle-radius': 15 } }, 'supermarket_vector_layer'); // puts this layer behind the 'supermarket_vector_layer' on the map });  "
},
{
	"uri": "http://mwidener.github.io/lecture4/lec4_5/",
	"title": "My 1st MapBox Map",
	"tags": [],
	"description": "",
	"content": " To make our map we\u0026rsquo;ll need at least some HTML code and JavaScript code. We could do it all in one file, but for organizational reasons, we\u0026rsquo;ll create an HTML file and another file for our JavaScript.\nSetting up your html file. The below code has the basics that we\u0026rsquo;ll need to set up our map.\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=utf-8 /\u0026gt; \u0026lt;title\u0026gt;TITLE HERE – shows up in browser tab\u0026lt;/title\u0026gt; \u0026lt;meta name='viewport' content='initial-scale=1,maximum-scale=1,user-scalable=no' /\u0026gt; \u0026lt;!-- Adjusts the screen width to the device accessing the web map --\u0026gt; \u0026lt;script src=\u0026quot;https://api.mapbox.com/mapbox-gl-js/v1.7.0/mapbox-gl.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;!-- Sets up Mapbox GL JS --\u0026gt; \u0026lt;link href=\u0026quot;https://api.mapbox.com/mapbox-gl-js/v1.7.0/mapbox-gl.css\u0026quot; rel=\u0026quot;stylesheet\u0026quot; /\u0026gt; \u0026lt;!-- Sets up Mapbox GL JS --\u0026gt; \u0026lt;!-- below - in file CSS browser set up --\u0026gt; \u0026lt;style\u0026gt; body { margin:0; padding:0; } .map { position:absolute; top:0; bottom:0; width:100%; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;!-- where we put our javascript code --\u0026gt; \u0026lt;div id='map' class='map'\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!-- browser set up --\u0026gt; \u0026lt;script src='./MYJAVASCRIPTCODE.js'\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;!-- \u0026quot;./\u0026quot; means current directory, so if you put your code elsewhere use that path --\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Setting up your JavaScript file. mapboxgl.accessToken = '\u0026lt;YOUR ACCESS TOKEN HERE\u0026gt;'; var map = new mapboxgl.Map({ container: 'map', //container id in HTML style: 'mapbox://styles/mapbox/streets-v8', //stylesheet location center: [-96.7, 60.00], // starting point, longitude/latitude zoom: 3 // starting zoom level });  Let\u0026rsquo;s try this for real\u0026hellip;  Create HTML/JS code to create a map and then post it on your website.  Create a new style and use that path for your new map.   "
},
{
	"uri": "http://mwidener.github.io/lecture3/",
	"title": "Lecture 3: Data/Viz",
	"tags": [],
	"description": "",
	"content": " Web-based Spatial Data, continued Recall js objects? var mycar = \u0026quot;subaru\u0026quot;; // name: value pairs (name/value separated by colon) var mycar = { make: \u0026quot;Subaru\u0026quot;, model: \u0026quot;Impreza\u0026quot;, year: 2005, states_provinces_driven_through: [\u0026quot;ontario\u0026quot;, \u0026quot;new york\u0026quot;, \u0026quot;michigan\u0026quot;]; };  What would this return? mycar.make  This leads us to geoJSON: Geographic Java Script Object Notation GeoJSON is a simple open standard used to store spatial features, alongside non-spatial features. { \u0026quot;type\u0026quot;: \u0026quot;FeatureCollection\u0026quot;, \u0026quot;features\u0026quot;: [ { \u0026quot;type\u0026quot;: \u0026quot;Feature\u0026quot;, \u0026quot;geometry\u0026quot;: {\u0026quot;type\u0026quot;: \u0026quot;Point\u0026quot;, \u0026quot;coordinates\u0026quot;: [102.0, 0.5]}, \u0026quot;properties\u0026quot;: {\u0026quot;prop0\u0026quot;: \u0026quot;value0\u0026quot;} }, { \u0026quot;type\u0026quot;: \u0026quot;Feature\u0026quot;, \u0026quot;geometry\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;LineString\u0026quot;, \u0026quot;coordinates\u0026quot;: [ [102.0, 0.0], [103.0, 1.0], [104.0, 0.0], [105.0, 1.0] ] }, \u0026quot;properties\u0026quot;: { \u0026quot;prop0\u0026quot;: \u0026quot;value0\u0026quot;, \u0026quot;prop1\u0026quot;: 0.0 } }, { \u0026quot;type\u0026quot;: \u0026quot;Feature\u0026quot;, \u0026quot;geometry\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;Polygon\u0026quot;, \u0026quot;coordinates\u0026quot;: [ [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0] ] ] }, \u0026quot;properties\u0026quot;: { \u0026quot;prop0\u0026quot;: \u0026quot;value0\u0026quot;, \u0026quot;prop1\u0026quot;: {\u0026quot;this\u0026quot;: \u0026quot;that\u0026quot;} } } ] }  "
},
{
	"uri": "http://mwidener.github.io/lecture3/lec3_5/",
	"title": "TopoJSON",
	"tags": [],
	"description": "",
	"content": " TopoJSON  GeoJSON that enforces topological rules  Preserves connections between lines  Preserves adjacency  Useful for network analysis/spatial relations  More complicated mark-up language  Uses concept of arcs   "
},
{
	"uri": "http://mwidener.github.io/lecture2/lec2_5/",
	"title": "Spatial Data for the Web",
	"tags": [],
	"description": "",
	"content": " Other formats more common in web world Many other, compact data structures that work better for online transmission/compression\nOne major format is based off of markup languages.\n What is XML?  Extensible Markup Language Store/transport data Human and machine readable  XML doesn’t do anything  Information wrapped in tags XML carries data, HTML designed to display data XML doesn’t have predefined tags (e.g. ), HTML does   XML Example: \u0026lt;note\u0026gt; \u0026lt;to\u0026gt;Tove\u0026lt;/to\u0026gt; \u0026lt;from\u0026gt;Jani\u0026lt;/from\u0026gt; \u0026lt;heading\u0026gt;Reminder\u0026lt;/heading\u0026gt; \u0026lt;body\u0026gt;Don't forget me this weekend!\u0026lt;/body\u0026gt; \u0026lt;/note\u0026gt;  A computer program reads the tags and displays the text based on predefined rules\nNOTE To: Tove From: Jani Reminder Don\u0026rsquo;t forget about the milk! "
},
{
	"uri": "http://mwidener.github.io/introduction/syllabus/",
	"title": "Syllabus",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://mwidener.github.io/introduction/instructor_info/",
	"title": "Instructor Information",
	"tags": [],
	"description": "",
	"content": " Prof. Michael Widener email michael michael DOT widener AT utoronto DOT ca\noffice hours: Thursdays 1pm - 3pm Sid Smith Hall 5037\nAdditional resources  Mapbox GL JS API Mapbox GL JS Examples  "
},
{
	"uri": "http://mwidener.github.io/lecture4/",
	"title": "Lecture 4: Mapbox Intro",
	"tags": [],
	"description": "",
	"content": " Introducing Mapbox In this lecture we\u0026rsquo;re going to dive into Mapbox Studio, and then begin to explore the javascript code needed to build our first Mapbox map with an API.\nGo ahead an log in to MapBox and we\u0026rsquo;ll get started\u0026hellip;\n"
},
{
	"uri": "http://mwidener.github.io/lecture3/lec3_6/",
	"title": "GeoJSON editing exercise",
	"tags": [],
	"description": "",
	"content": " Exercise Easy GeoJSON editing http://geojson.io/  Create your path to work, adding points and polygons along the way  Inspect the geojson code that is generated and relate it to the spatial files that are on the map  Next create a geojson file from scratch, and load it into geojson.io Finally, save the geojson file you created and export it as a geojson file  "
},
{
	"uri": "http://mwidener.github.io/lecture2/lec2_6/",
	"title": "GML KML OSM-XML",
	"tags": [],
	"description": "",
	"content": " GML GML defines a variety of object types: * Features * Coordinate reference systems * Geometry (simple and complex) * Topology * Time * Units of Measure * Generalized values\nGML geometries: * Point * LineString * Polygon * Newer versions of GML have the ability to represent coverages/raster\n\u0026lt;gml:Polygon\u0026gt; \u0026lt;gml:outerBoundaryIs\u0026gt; \u0026lt;gml:LinearRing\u0026gt; \u0026lt;gml:coordinates\u0026gt;0,0 100,0 100,100 0,100 0,0\u0026lt;/gml:coordinates\u0026gt; \u0026lt;/gml:LinearRing\u0026gt; \u0026lt;/gml:outerBoundaryIs\u0026gt; \u0026lt;/gml:Polygon\u0026gt; \u0026lt;gml:Point\u0026gt; \u0026lt;gml:coordinates\u0026gt;100,200\u0026lt;/gml:coordinates\u0026gt; \u0026lt;/gml:Point\u0026gt; \u0026lt;gml:LineString\u0026gt; \u0026lt;gml:coordinates\u0026gt;100,200 150,300\u0026lt;/gml:coordinates\u0026gt; \u0026lt;/gml:LineString\u0026gt;  KML KML extends GML and maintains an open standard: OpenGIS KML Encoding Standard\nFour basic ways to display data:  Placemarks Polylines Polygons Overlays  Difference between polylines and polygons is the first and last point is the same for polygons.\nExamples of how KML can be used here.\nOSM XML OpenStreetMap XML is tag based, but not standardized in practice. It\u0026rsquo;s based on XML, with different tags than GML/KML.\nGeometries: * Node * Way * Closed way\n\u0026lt;node id=\u0026quot;60006651\u0026quot; visible=\u0026quot;true\u0026quot; version=\u0026quot;8\u0026quot; changeset=\u0026quot;14929023\u0026quot; timestamp=\u0026quot;2013-02-06T02:06:38Z\u0026quot; user=\u0026quot;andrewpmk\u0026quot; uid=\u0026quot;1679\u0026quot; lat=\u0026quot;43.6629666\u0026quot; lon=\u0026quot;-79.3974730\u0026quot;/\u0026gt; \u0026lt;way id=\u0026quot;8027962\u0026quot; visible=\u0026quot;true\u0026quot; version=\u0026quot;13\u0026quot; changeset=\u0026quot;29433309\u0026quot; timestamp=\u0026quot;2015-03-12T19:30:13Z\u0026quot; user=\u0026quot;andrewpmk\u0026quot; uid=\u0026quot;1679\u0026quot;\u0026gt; \u0026lt;nd ref=\u0026quot;60006651\u0026quot;/\u0026gt; \u0026lt;nd ref=\u0026quot;2143468180\u0026quot;/\u0026gt; \u0026lt;nd ref=\u0026quot;60006652\u0026quot;/\u0026gt; \u0026lt;nd ref=\u0026quot;60006653\u0026quot;/\u0026gt; \u0026lt;nd ref=\u0026quot;60006655\u0026quot;/\u0026gt; \u0026lt;nd ref=\u0026quot;60006647\u0026quot;/\u0026gt; \u0026lt;nd ref=\u0026quot;60006648\u0026quot;/\u0026gt; \u0026lt;nd ref=\u0026quot;60006649\u0026quot;/\u0026gt; \u0026lt;nd ref=\u0026quot;60006650\u0026quot;/\u0026gt; \u0026lt;nd ref=\u0026quot;60006651\u0026quot;/\u0026gt; \u0026lt;tag k=\u0026quot;addr:city\u0026quot; v=\u0026quot;Toronto\u0026quot;/\u0026gt; \u0026lt;tag k=\u0026quot;addr:country\u0026quot; v=\u0026quot;CA\u0026quot;/\u0026gt; \u0026lt;tag k=\u0026quot;addr:housenumber\u0026quot; v=\u0026quot;73-75\u0026quot;/\u0026gt; \u0026lt;tag k=\u0026quot;addr:province\u0026quot; v=\u0026quot;ON\u0026quot;/\u0026gt; \u0026lt;tag k=\u0026quot;addr:street\u0026quot; v=\u0026quot;St. George Street\u0026quot;/\u0026gt; \u0026lt;tag k=\u0026quot;building\u0026quot; v=\u0026quot;university\u0026quot;/\u0026gt; \u0026lt;tag k=\u0026quot;college\u0026quot; v=\u0026quot;University College\u0026quot;/\u0026gt; \u0026lt;tag k=\u0026quot;name\u0026quot; v=\u0026quot;Sir Daniel Wilson Residence (University College)\u0026quot;/\u0026gt; \u0026lt;tag k=\u0026quot;operator\u0026quot; v=\u0026quot;University of Toronto\u0026quot;/\u0026gt; \u0026lt;/way\u0026gt;  Go to OpenStreetMap and download some data. Inspect nodes/ways/closed ways. "
},
{
	"uri": "http://mwidener.github.io/lecture5/",
	"title": "Lecture 5: Adding Data/Making Maps",
	"tags": [],
	"description": "",
	"content": " Adding Data and Making Maps In this lecture we\u0026rsquo;re going to go over how data can be added to our web maps using javascript.\n"
},
{
	"uri": "http://mwidener.github.io/lecture3/lec3_7/",
	"title": "Web Cartography/Viz: Tiles!",
	"tags": [],
	"description": "",
	"content": " Web Cartography and Visualization  Slippy Maps  They slip as a user clicks and holds, dragging the map around in the browser  Conventions  256x256 pixel PNG files Each zoom level is a directory, each column is a subdirectory, and each tile is a file (.PNG) Filename format is: /zoom/x/y.png   Different web maps have different tile conventions. At a basic level, a web map has a number of zoom levels.\nAt each zoom level there are a collection of tiles, each representing a predefined area in space.\nIf you\u0026rsquo;re zoomed out (low resolution) there are fewer tiles. If you\u0026rsquo;re zoomed in, there are more tiles.\nThe tiles are generated using the geojson data (or OSMXML etc.) we\u0026rsquo;ve been working with.\nTry out an interactive example If we\u0026rsquo;re working with image tiles we refer to them as raster tiles. If we\u0026rsquo;re working with vector (continuous) information, we use the term vector tiles. Updates to individual tiles Tiles are updated as data is tweaked. As an example, in OSM:  In the past weekly updates of tiles based on edits made to OSM  Now, more fluid updates to tiles occur http://wiki.openstreetmap.org/wiki/Slippy_Map#Mapnik_tile_rendering  http://tile.openstreetmap.org/10/286/373.png  The tile  http://tile.openstreetmap.org/10/286/373.png/status  Information on the tile, time of last render  http://tile.openstreetmap.org/10/286/373.png/dirty  Force a re-rendering of tile   "
},
{
	"uri": "http://mwidener.github.io/lecture6/",
	"title": "Filters and Mouse Events",
	"tags": [],
	"description": "",
	"content": " How do we interact with our maps? In this lecture we\u0026rsquo;re going to learn about events and filtering. These can be used select specific items in our spatial data and to trigger certain actions.\nWe\u0026rsquo;ll combine our mouse behaviour with filters in a way that influences what gets displayed.\nWhat are we covering today?  Filters  Picking what shows up on the map!  Basic interactivity  Javascript events Mouse move Mouse click Popups Simple text * HTML in pop ups   "
},
{
	"uri": "http://mwidener.github.io/lecture3/lec3_8/",
	"title": "Vector Tiles",
	"tags": [],
	"description": "",
	"content": " What are Vector Tiles? And how do they differ from raster tiles?  Raster tiles are pixelated images of maps  http://www.openstreetmap.org/  Vector tiles are pure data  Descriptions of geometry, objects, names, etc. http://www.google.ca/maps   Same benefits as raster tiles: caching, scaling, moving map around Additionally: Styling: vectors can be styled when requested We can change the display characteristics of points, lines, polygons Not pre-rendered Size: vector tiles are really small, which makes them high resolution and fast! Only 20-50% the size of equivalent raster tiles "
},
{
	"uri": "http://mwidener.github.io/lecture3/lec3_9/",
	"title": "Cartographic Considerations",
	"tags": [],
	"description": "",
	"content": " Cartographic Considerations Delivery of maps to users is rather specific  People “consume” these maps via the internet Allows for some cartographic considerations to be made at a general level  However, different devices may require customization  For example, phone vs. tablet vs. laptop vs. desktop Mostly an issue for webPAGE development, not web maps  Think like a web designer  Communicating spatial information!  Need to hold the attention of your user  General guidelines:  Bigger fonts Bigger buttons Brighter colors Fewer distractions!   Colors  Light colors can be overly bright and too harsh on the eye  Can also affect clarity of boundaries  Background/foreground color combos  Need to make sure text is visible given the colors in the background. Avoid washing out text in the foreground  Visual efficiency    Fonts Web mapping process "
},
{
	"uri": "http://mwidener.github.io/lecture3/lec3_10/",
	"title": "Pre-lab work",
	"tags": [],
	"description": "",
	"content": " * Students have access to \\barchan\\vol1\\public\\winscp.exe right on their desktop * login with your utorid and password to ggr472.geog.utoronto.ca * upload files into the \u0026ldquo;public_html\u0026rdquo; directory * Visit http://ggr472.geog.utoronto.ca/~utorid/ to see your uploaded files "
},
{
	"uri": "http://mwidener.github.io/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://mwidener.github.io/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]