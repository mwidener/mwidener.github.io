[
{
	"uri": "http://mwidener.github.io/lecture3/lec3_1/",
	"title": "GeoJSON components",
	"tags": [],
	"description": "",
	"content": " A Feature type is a spatial object  Has geometry and properties It is possible to have multiple geometries, but this is very rare   A FeatureCollection type  Object that has feature objects    { \u0026#34;type\u0026#34;: \u0026#34;FeatureCollection\u0026#34;, \u0026#34;features\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;Feature\u0026#34;, \u0026#34;geometry\u0026#34;: {\u0026#34;type\u0026#34;: \u0026#34;Point\u0026#34;, \u0026#34;coordinates\u0026#34;: [102.0, 0.5]}, \u0026#34;properties\u0026#34;: {\u0026#34;prop0\u0026#34;: \u0026#34;value0\u0026#34;} }, { \u0026#34;type\u0026#34;: \u0026#34;Feature\u0026#34;, \u0026#34;geometry\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;LineString\u0026#34;, \u0026#34;coordinates\u0026#34;: [ [102.0, 0.0], [103.0, 1.0], [104.0, 0.0], [105.0, 1.0] ] }, \u0026#34;properties\u0026#34;: { \u0026#34;prop0\u0026#34;: \u0026#34;value0\u0026#34;, \u0026#34;prop1\u0026#34;: 0.0 } }, { \u0026#34;type\u0026#34;: \u0026#34;Feature\u0026#34;, \u0026#34;geometry\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;Polygon\u0026#34;, \u0026#34;coordinates\u0026#34;: [ [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0] ] ] }, \u0026#34;properties\u0026#34;: { \u0026#34;prop0\u0026#34;: \u0026#34;value0\u0026#34;, \u0026#34;prop1\u0026#34;: {\u0026#34;this\u0026#34;: \u0026#34;that\u0026#34;} } } ] } From geojson.org:  2.2. Feature Objects  A GeoJSON object with the type \u0026ldquo;Feature\u0026rdquo; is a feature object. A feature object must have a member with the name \u0026ldquo;geometry\u0026rdquo;. The value of the geometry member is a geometry object as defined above or a JSON null value. A feature object must have a member with the name \u0026ldquo;properties\u0026rdquo;. The value of the properties member is an object (any JSON object or a JSON null value). If a feature has a commonly used identifier, that identifier should be included as a member of the feature object with the name \u0026ldquo;id\u0026rdquo;.   2.3. Feature Collection Objects  A GeoJSON object with the type \u0026ldquo;FeatureCollection\u0026rdquo; is a feature collection object. An object of type \u0026ldquo;FeatureCollection\u0026rdquo; must have a member with the name \u0026ldquo;features\u0026rdquo;. The value corresponding to \u0026ldquo;features\u0026rdquo; is an array. Each element in the array is a feature object as defined above.    "
},
{
	"uri": "http://mwidener.github.io/lecture1/lec1_1/",
	"title": "Review of Course Structure",
	"tags": [],
	"description": "",
	"content": "For ‘letter marked’ assignments, I will use the Faculty of Arts and Sciences marking criteria.\n See syllabus for course policies on accessibility, accommodation, academic integrity and late assignments.\n This course will have a lot of new material for most people, so as a general rule, it's best to keep an open line of communication with me!\n Materials  Text editor  This is where you will write down and edit your code. A good editor is key! I recommend Atom or Sublime   Mapbox Account  www.mapbox.com   Lynda Access  access via this link to lynda at uoft   google or yahoo or bing or alta vista or whatever\u0026hellip;  "
},
{
	"uri": "http://mwidener.github.io/lecture2/lec2_1/",
	"title": "Strengths/Weaknesses of Web Maps",
	"tags": [],
	"description": "",
	"content": "Strengths of Web Maps Easy to:  keep up to date distribute personalize collaborate  Cheap  diverse array of open source software  Different types of data Integration with other types of info online Weaknesses of Web Maps Steep learning curve for advanced work Not necessarily best platform for complex computation Different platform types means many things to learn Having info online means security/maintenance concerns that differ from conventional GIS "
},
{
	"uri": "http://mwidener.github.io/",
	"title": "Home",
	"tags": [],
	"description": "",
	"content": "Welcome to Developing Web Maps! Welcome to GGR 472: Developing Web Maps - Winter 2020. In this class we will explore how web maps are designed and created, using the MapBox GL JS API.\nCourse Overview  what web maps are good for, and what they're less good for, what kinds of spatial data they use, how design considerations change for viewing spatial data online numerous interactive features, and how to do basic GIS online.  A note on coding: Don't be this guy: "
},
{
	"uri": "http://mwidener.github.io/lecture3/lec3_2/",
	"title": "GeoJSON geometries",
	"tags": [],
	"description": "",
	"content": "Geometries in geojson are similar to the other online formats we've explored.  Point = Point Line/polyline = LineString Polygon = Polygon  { \u0026#34;type\u0026#34;: \u0026#34;Point\u0026#34;, \u0026#34;coordinates\u0026#34;: [30,10] } { \u0026#34;type\u0026#34;: \u0026#34;LineString\u0026#34;, \u0026#34;coordinates\u0026#34;: [ [30,10], [10,30],[40,40] ] } { \u0026#34;type\u0026#34;: \u0026#34;Polygon\u0026#34;, \u0026#34;coordinates\u0026#34;: [ [30,10], [40,40], [20,40], [10,20],[30,10] ] } { \u0026#34;type\u0026#34;: \u0026#34;Polygon\u0026#34;, \u0026#34;coordinates\u0026#34;: [ [[35,10], [45,45], [15,40], [10,20],[35,10]], [[20,30], [35,35], [30,20], [20,30]] ] } "
},
{
	"uri": "http://mwidener.github.io/lecture1/lec1_2/",
	"title": "Programming",
	"tags": [],
	"description": "",
	"content": "Programming is important! We'll be using three languages:\n JavaScript HTML CSS  Why do we need to program?  You can handle bigger projects and more data through automation and logic. This is the standard way that serious web mapping and web GIS is done. It looks great on your resume!  HTML  HyperText Markup Language  Files sent from servers to personal computers They tell the computer things like what to display or where to get data   HTML elements tell us things about where text should go, how it should be displayed, if an image should be centered  We express HTML elements through HTML tags  \u0026lt;html\u0026gt; ... \u0026lt;/html\u0026gt;     http://html.com/document/  CSS  Cascading Style Sheet  “Style sheet” code used to style the content of a web page. Interacts with HTML and describes how things should be sized, coloured, etc.  Can be more complicated     Helps separate the website content from website styling  Reduces repetition if you have multiple HTML docs   http://www.w3schools.com/css/default.asp  JavaScript  The de facto lingua franca of the world wide web Controls the behaviour of a webpage  HTML and CSS just describe   Javascript is a programming language  Conditional statements Logic Looping Data manipulation/handling    "
},
{
	"uri": "http://mwidener.github.io/lecture2/lec2_2/",
	"title": "Classification of Web Maps",
	"tags": [],
	"description": "",
	"content": "Classifying Web Maps A 2001 paper by Jan Kraak attempted to classify web maps  Web Maps  static maps  view only interactive interface/contents   dynamic maps  view only interactive interface/contents      Other ways to think about web maps  Analytical web maps  Basically GIS online   Animated/Realtime web maps  Constantly updated maps showing changes in spatial locations   Collaborative web maps  Teams contribute to a single spatial representation online   Online atlases  Static collections of production quality maps that were formerly printed as books, can be interactive   Static web maps  Pages with maps that have no interactivity    "
},
{
	"uri": "http://mwidener.github.io/introduction/",
	"title": "Course Information",
	"tags": [],
	"description": "",
	"content": "This section has information about the course structure and where you can go to get help. "
},
{
	"uri": "http://mwidener.github.io/lecture3/lec3_3/",
	"title": "GeoJSON polygons",
	"tags": [],
	"description": "",
	"content": "Polygons can be quite complicated. GeoJSON allows for an easy way to describe polygons with (multiple) interior gaps.  Polgyon  LinearRing (exterior)  Positions   LinearRing (interior)  Positions   LinearRing (interior)  Positions      Only 1 exterior ring and then as many interior rings as needed { \u0026#34;type\u0026#34;: \u0026#34;Polygon\u0026#34;, \u0026#34;coordinates\u0026#34;: [ [[35,10], [45,45], [15,40], [10,20],[35,10]], [[20,30], [35,35], [30,20], [20,30]] ] } Care also should be taken with coordinate ordering in GeoJSON Polygons The exterior ring should be counterclockwise Interior rings should be clockwise Why does this matter? The classic Chamberlain \u0026amp; Duquette algorithm for calculating the area of a polygon on a sphere has the nice property that counterclockwise-wound polygons have positive area and clockwise yield negative. If you ensure winding order, calculating the area of a polygon with holes is as simple as adding the areas of all rings. Winding order also has a default meaning in Canvas and other drawing APIs: drawing a path with counterclockwise order within one with clockwise order will cut it out of the filled image. source: More than you ever wanted to know about geojson\n"
},
{
	"uri": "http://mwidener.github.io/lecture1/lec1_3/",
	"title": "Basic Programming Concepts",
	"tags": [],
	"description": "",
	"content": "Basic Programming Concepts Variable assignment var x = 12 var blah = \u0026#34;some text that i\u0026#39;m writing right now!\u0026#34; blah = x y = blah - x Arrays var universities = [\u0026#34;UofT\u0026#34;, \u0026#34;Western\u0026#34;, \u0026#34;McMaster\u0026#34;]; universities[0] //will return \u0026#34;UofT\u0026#34; Conditional statements if (condition) { // block of code to be executed if the condition is true } An example from https://www.w3schools.com/js/js_if_else.asp\nif (hour \u0026lt; 18) { greeting = \u0026#34;Good day\u0026#34;; } else { greeting = \u0026#34;Good evening\u0026#34; } What would this return now?\nLoops var i; for (i = 0; i \u0026lt; universities.length; i++) { text += universities[i] + \u0026#34;\u0026lt;br\u0026gt;\u0026#34;; } /*will print: UofT Western McMaster */ To the board! "
},
{
	"uri": "http://mwidener.github.io/lecture2/lec2_3/",
	"title": "Making Web Maps",
	"tags": [],
	"description": "",
	"content": "How do we make web maps Approach depends on factors that are similar to how you develop conventional GISystems  Audience Scope Refresh rate Collaboration strategy  New dimensions  interactivity Realtime linkages to other online resources  Group exercise!  Find an online map on a website that isn’t a major web map provider (e.g. google, microsoft, etc.)  Describe the purpose of the map List any interactivity/features Does the map serve its purpose well? What additional features might be nice to have?    "
},
{
	"uri": "http://mwidener.github.io/lecture1/",
	"title": "Lecture 1: Intro",
	"tags": [],
	"description": "",
	"content": "Lecture 1 What are web maps?  What is this class about?  Investigating the history of web maps Exploring a range of web mapping tools Exploring a range of development methods Group work developing your own web map  "
},
{
	"uri": "http://mwidener.github.io/lecture3/lec3_4/",
	"title": "Limits of GeoJSON",
	"tags": [],
	"description": "",
	"content": "The dateline! Lines and polygons are a collection of points The points shoudl be within -180 and 180 degrees longitude Does a LineString go from -179 to 179 longitude go all the way around the world or just across the dateline? Solution: use 179 to 181 \u0026hellip; it's a hack, but it works.\n"
},
{
	"uri": "http://mwidener.github.io/lecture2/lec2_4/",
	"title": "Spatial Data",
	"tags": [],
	"description": "",
	"content": "Spatial Data Review Refresher:  Points Lines Polygons  How do we deal with these things in a computer?\nData Model  a set of constructs for describing and representing selected aspects of the real world in a computer. We need a model because the real world is infinitely complex.  Raster files: ncols 480 nrows 450 xllcorner 378923 yllcorner 4072345 cellsize 30 nodata_value -32768 43 2 45 7 3 56 2 5 23 65 34 6 32 54 57 34 2 2 54 6 ... 35 45 65 34 2 6 78 4 2 6 89 3 2 7 45 23 5 8 4 1 62 ... 43 2 45 7 3 56 2 5 23 65 34 6 32 54 57 34 2 2 54 6 ... 35 45 65 34 2 6 78 4 2 6 89 3 2 7 45 23 5 8 4 1 62 ... 43 2 45 7 3 56 2 5 23 65 34 6 32 54 57 34 2 2 54 6 ... 35 45 65 34 2 6 78 4 2 6 89 3 2 7 45 23 5 8 4 1 62 ... Vector Data Model  More commonly associated with discrete data Concepts Three general geometric types  Point Polyline Polygon    How do these look in the computer? It depends\u0026hellip; At the most basic level: What about shapefiles? This is a lot of information and not particularly efficient. That leads us to web mapping. Are shapefiles the way to go? Well, to understand why they aren't, it's helpful to understand a little about the internet.\n Packet switching  Data are broken into small chunks and passed from an origin to a destination Allows for many routes to the destination computer   Servers  Electronic filing cabinets that pass information when requested   Clients  Computers that get information from servers    "
},
{
	"uri": "http://mwidener.github.io/lecture2/",
	"title": "Lecture 2: Data",
	"tags": [],
	"description": "",
	"content": "What are web maps? Web maps are just maps on the internet. They can be static or interactive \u0026hellip; but nowadays they're mostly interactive.\nEasy way to diffuse spatial information and provide interactivity.\nWeb maps help move geographic information systems and sciences to the world wide web.\nWeb mapping consists of three major components:  geography information the Web  In this class we're moving in a different direction than many of your previous GIS courses. How can we use the web to make mapping useful in new and different ways?\n"
},
{
	"uri": "http://mwidener.github.io/lecture3/",
	"title": "Lecture 3: Data/Viz",
	"tags": [],
	"description": "",
	"content": "Web-based Spatial Data, continued Recall js objects? var mycar = \u0026#34;subaru\u0026#34;; // name: value pairs (name/value separated by colon) var mycar = { make: \u0026#34;Subaru\u0026#34;, model: \u0026#34;Impreza\u0026#34;, year: 2005, states_provinces_driven_through: [\u0026#34;ontario\u0026#34;, \u0026#34;new york\u0026#34;, \u0026#34;michigan\u0026#34;]; }; What would this return? mycar.make This leads us to geoJSON: Geographic Java Script Object Notation GeoJSON is a simple open standard used to store spatial features, alongside non-spatial features. { \u0026#34;type\u0026#34;: \u0026#34;FeatureCollection\u0026#34;, \u0026#34;features\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;Feature\u0026#34;, \u0026#34;geometry\u0026#34;: {\u0026#34;type\u0026#34;: \u0026#34;Point\u0026#34;, \u0026#34;coordinates\u0026#34;: [102.0, 0.5]}, \u0026#34;properties\u0026#34;: {\u0026#34;prop0\u0026#34;: \u0026#34;value0\u0026#34;} }, { \u0026#34;type\u0026#34;: \u0026#34;Feature\u0026#34;, \u0026#34;geometry\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;LineString\u0026#34;, \u0026#34;coordinates\u0026#34;: [ [102.0, 0.0], [103.0, 1.0], [104.0, 0.0], [105.0, 1.0] ] }, \u0026#34;properties\u0026#34;: { \u0026#34;prop0\u0026#34;: \u0026#34;value0\u0026#34;, \u0026#34;prop1\u0026#34;: 0.0 } }, { \u0026#34;type\u0026#34;: \u0026#34;Feature\u0026#34;, \u0026#34;geometry\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;Polygon\u0026#34;, \u0026#34;coordinates\u0026#34;: [ [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0] ] ] }, \u0026#34;properties\u0026#34;: { \u0026#34;prop0\u0026#34;: \u0026#34;value0\u0026#34;, \u0026#34;prop1\u0026#34;: {\u0026#34;this\u0026#34;: \u0026#34;that\u0026#34;} } } ] } "
},
{
	"uri": "http://mwidener.github.io/lecture3/lec3_5/",
	"title": "TopoJSON",
	"tags": [],
	"description": "",
	"content": "TopoJSON  GeoJSON that enforces topological rules  Preserves connections between lines   Preserves adjacency  Useful for network analysis/spatial relations   More complicated mark-up language  Uses concept of arcs    "
},
{
	"uri": "http://mwidener.github.io/lecture2/lec2_5/",
	"title": "Spatial Data for the Web",
	"tags": [],
	"description": "",
	"content": "Other formats more common in web world Many other, compact data structures that work better for online transmission/compression\nOne major format is based off of markup languages.\n What is XML?  Extensible Markup Language Store/transport data Human and machine readable   XML doesn’t do anything  Information wrapped in tags XML carries data, HTML designed to display data XML doesn’t have predefined tags (e.g. ), HTML does    XML Example: \u0026lt;note\u0026gt; \u0026lt;to\u0026gt;Tove\u0026lt;/to\u0026gt; \u0026lt;from\u0026gt;Jani\u0026lt;/from\u0026gt; \u0026lt;heading\u0026gt;Reminder\u0026lt;/heading\u0026gt; \u0026lt;body\u0026gt;Don\u0026#39;t forget me this weekend!\u0026lt;/body\u0026gt; \u0026lt;/note\u0026gt; A computer program reads the tags and displays the text based on predefined rules\nNOTE To: Tove From: Jani Reminder Don't forget about the milk! "
},
{
	"uri": "http://mwidener.github.io/introduction/syllabus/",
	"title": "Syllabus",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://mwidener.github.io/introduction/instructor_info/",
	"title": "Instructor Information",
	"tags": [],
	"description": "",
	"content": "Prof. Michael Widener email michael michael DOT widener AT utoronto DOT ca\noffice hours: Thursdays 1pm - 3pm Sid Smith Hall 5037\nAdditional resources  Mapbox GL JS API Mapbox GL JS Examples  "
},
{
	"uri": "http://mwidener.github.io/lecture3/lec3_6/",
	"title": "GeoJSON editing exercise",
	"tags": [],
	"description": "",
	"content": "Exercise Easy GeoJSON editing http://geojson.io/  Create your path to work, adding points and polygons along the way  Inspect the geojson code that is generated and relate it to the spatial files that are on the map   Next create a geojson file from scratch, and load it into geojson.io Finally, save the geojson file you created and export it as a geojson file  "
},
{
	"uri": "http://mwidener.github.io/lecture2/lec2_6/",
	"title": "GML KML OSM-XML",
	"tags": [],
	"description": "",
	"content": "GML GML defines a variety of object types:\n Features Coordinate reference systems Geometry (simple and complex) Topology Time Units of Measure Generalized values  GML geometries:\n Point LineString Polygon Newer versions of GML have the ability to represent coverages/raster  \u0026lt;gml:Polygon\u0026gt; \u0026lt;gml:outerBoundaryIs\u0026gt; \u0026lt;gml:LinearRing\u0026gt; \u0026lt;gml:coordinates\u0026gt;0,0 100,0 100,100 0,100 0,0\u0026lt;/gml:coordinates\u0026gt; \u0026lt;/gml:LinearRing\u0026gt; \u0026lt;/gml:outerBoundaryIs\u0026gt; \u0026lt;/gml:Polygon\u0026gt; \u0026lt;gml:Point\u0026gt; \u0026lt;gml:coordinates\u0026gt;100,200\u0026lt;/gml:coordinates\u0026gt; \u0026lt;/gml:Point\u0026gt; \u0026lt;gml:LineString\u0026gt; \u0026lt;gml:coordinates\u0026gt;100,200 150,300\u0026lt;/gml:coordinates\u0026gt; \u0026lt;/gml:LineString\u0026gt; KML KML extends GML and maintains an open standard: OpenGIS KML Encoding Standard\nFour basic ways to display data:  Placemarks Polylines Polygons Overlays  Difference between polylines and polygons is the first and last point is the same for polygons.\nExamples of how KML can be used here.\nOSM XML OpenStreetMap XML is tag based, but not standardized in practice. It's based on XML, with different tags than GML/KML.\nGeometries:\n Node Way Closed way  \u0026lt;node id=\u0026#34;60006651\u0026#34; visible=\u0026#34;true\u0026#34; version=\u0026#34;8\u0026#34; changeset=\u0026#34;14929023\u0026#34; timestamp=\u0026#34;2013-02-06T02:06:38Z\u0026#34; user=\u0026#34;andrewpmk\u0026#34; uid=\u0026#34;1679\u0026#34; lat=\u0026#34;43.6629666\u0026#34; lon=\u0026#34;-79.3974730\u0026#34;/\u0026gt; \u0026lt;way id=\u0026#34;8027962\u0026#34; visible=\u0026#34;true\u0026#34; version=\u0026#34;13\u0026#34; changeset=\u0026#34;29433309\u0026#34; timestamp=\u0026#34;2015-03-12T19:30:13Z\u0026#34; user=\u0026#34;andrewpmk\u0026#34; uid=\u0026#34;1679\u0026#34;\u0026gt; \u0026lt;nd ref=\u0026#34;60006651\u0026#34;/\u0026gt; \u0026lt;nd ref=\u0026#34;2143468180\u0026#34;/\u0026gt; \u0026lt;nd ref=\u0026#34;60006652\u0026#34;/\u0026gt; \u0026lt;nd ref=\u0026#34;60006653\u0026#34;/\u0026gt; \u0026lt;nd ref=\u0026#34;60006655\u0026#34;/\u0026gt; \u0026lt;nd ref=\u0026#34;60006647\u0026#34;/\u0026gt; \u0026lt;nd ref=\u0026#34;60006648\u0026#34;/\u0026gt; \u0026lt;nd ref=\u0026#34;60006649\u0026#34;/\u0026gt; \u0026lt;nd ref=\u0026#34;60006650\u0026#34;/\u0026gt; \u0026lt;nd ref=\u0026#34;60006651\u0026#34;/\u0026gt; \u0026lt;tag k=\u0026#34;addr:city\u0026#34; v=\u0026#34;Toronto\u0026#34;/\u0026gt; \u0026lt;tag k=\u0026#34;addr:country\u0026#34; v=\u0026#34;CA\u0026#34;/\u0026gt; \u0026lt;tag k=\u0026#34;addr:housenumber\u0026#34; v=\u0026#34;73-75\u0026#34;/\u0026gt; \u0026lt;tag k=\u0026#34;addr:province\u0026#34; v=\u0026#34;ON\u0026#34;/\u0026gt; \u0026lt;tag k=\u0026#34;addr:street\u0026#34; v=\u0026#34;St. George Street\u0026#34;/\u0026gt; \u0026lt;tag k=\u0026#34;building\u0026#34; v=\u0026#34;university\u0026#34;/\u0026gt; \u0026lt;tag k=\u0026#34;college\u0026#34; v=\u0026#34;University College\u0026#34;/\u0026gt; \u0026lt;tag k=\u0026#34;name\u0026#34; v=\u0026#34;Sir Daniel Wilson Residence (University College)\u0026#34;/\u0026gt; \u0026lt;tag k=\u0026#34;operator\u0026#34; v=\u0026#34;University of Toronto\u0026#34;/\u0026gt; \u0026lt;/way\u0026gt; Go to OpenStreetMap and download some data. Inspect nodes/ways/closed ways. "
},
{
	"uri": "http://mwidener.github.io/lecture3/lec3_7/",
	"title": "Web Cartography/Viz: Tiles!",
	"tags": [],
	"description": "",
	"content": "Web Cartography and Visualization  Slippy Maps  They slip as a user clicks and holds, dragging the map around in the browser   Conventions  256x256 pixel PNG files Each zoom level is a directory, each column is a subdirectory, and each tile is a file (.PNG) Filename format is: /zoom/x/y.png    Different web maps have different tile conventions. At a basic level, a web map has a number of zoom levels.\nAt each zoom level there are a collection of tiles, each representing a predefined area in space.\nIf you're zoomed out (low resolution) there are fewer tiles. If you're zoomed in, there are more tiles.\nThe tiles are generated using the geojson data (or OSMXML etc.) we've been working with.\nTry out an interactive example If we're working with image tiles we refer to them as raster tiles. If we're working with vector (continuous) information, we use the term vector tiles. Updates to individual tiles Tiles are updated as data is tweaked. As an example, in OSM:  In the past weekly updates of tiles based on edits made to OSM  Now, more fluid updates to tiles occur http://wiki.openstreetmap.org/wiki/Slippy_Map#Mapnik_tile_rendering   http://tile.openstreetmap.org/10/286/373.png  The tile   http://tile.openstreetmap.org/10/286/373.png/status  Information on the tile, time of last render   http://tile.openstreetmap.org/10/286/373.png/dirty  Force a re-rendering of tile    "
},
{
	"uri": "http://mwidener.github.io/lecture3/lec3_8/",
	"title": "Vector Tiles",
	"tags": [],
	"description": "",
	"content": "What are Vector Tiles? And how do they differ from raster tiles?  Raster tiles are pixelated images of maps  http://www.openstreetmap.org/   Vector tiles are pure data  Descriptions of geometry, objects, names, etc. http://www.google.ca/maps    Same benefits as raster tiles: caching, scaling, moving map around Additionally: Styling: vectors can be styled when requested We can change the display characteristics of points, lines, polygons Not pre-rendered Size: vector tiles are really small, which makes them high resolution and fast! Only 20-50% the size of equivalent raster tiles "
},
{
	"uri": "http://mwidener.github.io/lecture3/lec3_9/",
	"title": "Cartographic Considerations",
	"tags": [],
	"description": "",
	"content": "Cartographic Considerations Delivery of maps to users is rather specific  People “consume” these maps via the internet Allows for some cartographic considerations to be made at a general level  However, different devices may require customization  For example, phone vs. tablet vs. laptop vs. desktop Mostly an issue for webPAGE development, not web maps  Think like a web designer  Communicating spatial information!  Need to hold the attention of your user   General guidelines:  Bigger fonts Bigger buttons Brighter colors Fewer distractions!    Colors  Light colors can be overly bright and too harsh on the eye  Can also affect clarity of boundaries   Background/foreground color combos  Need to make sure text is visible given the colors in the background. Avoid washing out text in the foreground  Visual efficiency      Fonts Web mapping process "
},
{
	"uri": "http://mwidener.github.io/lecture3/lec3_10/",
	"title": "Pre-lab work",
	"tags": [],
	"description": "",
	"content": "* Students have access to \\barchan\\vol1\\public\\winscp.exe right on their desktop * login with your utorid and password to ggr472.geog.utoronto.ca * upload files into the \u0026ldquo;public_html\u0026rdquo; directory * Visit http://ggr472.geog.utoronto.ca/~utorid/ to see your uploaded files "
},
{
	"uri": "http://mwidener.github.io/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://mwidener.github.io/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]